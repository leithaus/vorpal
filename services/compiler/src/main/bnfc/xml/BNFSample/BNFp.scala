// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
import org.scalaxb.rt

case class Integer(value: String)

object Integer extends rt.ImplicitXMLWriter[Integer] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Integer = seq match {
    case node: scala.xml.Node => Integer((node \ "@value").text)
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Integer, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    attribute = scala.xml.Attribute(null, "value", __obj.value.toString, attribute)
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class DoubleType(value: String)

object DoubleType extends rt.ImplicitXMLWriter[DoubleType] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): DoubleType = seq match {
    case node: scala.xml.Node => DoubleType((node \ "@value").text)
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: DoubleType, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    attribute = scala.xml.Attribute(null, "value", __obj.value.toString, attribute)
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class StringType(value: String)

object StringType extends rt.ImplicitXMLWriter[StringType] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): StringType = seq match {
    case node: scala.xml.Node => StringType((node \ "@value").text)
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: StringType, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    attribute = scala.xml.Attribute(null, "value", __obj.value.toString, attribute)
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Ident(value: String)

object Ident extends rt.ImplicitXMLWriter[Ident] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Ident = seq match {
    case node: scala.xml.Node => Ident((node \ "@value").text)
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Ident, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    attribute = scala.xml.Attribute(null, "value", __obj.value.toString, attribute)
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class CharType(value: String)

object CharType extends rt.ImplicitXMLWriter[CharType] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): CharType = seq match {
    case node: scala.xml.Node => CharType((node \ "@value").text)
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: CharType, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    attribute = scala.xml.Attribute(null, "value", __obj.value.toString, attribute)
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LGrammar(LGr: LGr,
  LDef: Seq[LDef])

object LGrammar extends rt.ElemNameParser[LGrammar] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[LGrammar] =
    (rt.ElemName(targetNamespace, "LGr")) ~ 
      rep(rt.ElemName(targetNamespace, "LDef")) ^^
        { case p1 ~ 
      p2 => LGrammar(LGr.fromXML(p1),
      p2.toList.map(x => LDef.fromXML(x))) }
        
  def toXML(__obj: LGrammar, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Seq.concat(LGr.toXML(__obj.LGr, targetNamespace, Some("LGr"), __scope),
        __obj.LDef.flatMap(x => LDef.toXML(x, targetNamespace, Some("LDef"), __scope))): _*)
  }
  

}



case class LGr()

object LGr extends rt.ImplicitXMLWriter[LGr] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LGr = seq match {
    case node: scala.xml.Node => LGr()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LGr, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LDef(arg1: rt.DataRecord[Any])

object LDef extends rt.ElemNameParser[LDef] {
  import LDefSequence1._
  import LDefSequence2._
  import LDefSequence3._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[LDef] =
    ((((rt.ElemName(targetNamespace, "DefAll")) ~ 
    (rt.ElemName(targetNamespace, "Def"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, LDefSequence1(DefAll.fromXML(p1),
      Def.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "DefSome")) ~ 
    rep(rt.ElemName(targetNamespace, "Ident")) ~ 
    (rt.ElemName(targetNamespace, "Def"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, LDefSequence2(DefSome.fromXML(p1),
      p2.toList.map(x => Ident.fromXML(x)),
      Def.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "LDefView")) ~ 
    rep(rt.ElemName(targetNamespace, "Ident"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, LDefSequence3(LDefView.fromXML(p1),
      p2.toList.map(x => Ident.fromXML(x)))) })) ^^
        { case p1 => LDef(p1) }
        
  def toXML(__obj: LDef, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (LDefOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  LDefOption

object LDefOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LDefSequence1 => LDefSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: LDefSequence2 => LDefSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: LDefSequence3 => LDefSequence3.toXML(__obj, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class LDefSequence1(DefAll: DefAll,
  Def: Def)

object LDefSequence1 extends rt.ImplicitXMLWriter[LDefSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LDefSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LDefSequence1")      
  }
  
  def toXML(__obj: LDefSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(DefAll.toXML(__obj.DefAll, targetNamespace, Some("DefAll"), __scope),
        Def.toXML(__obj.Def, targetNamespace, Some("Def"), __scope))
  }
}

case class LDefSequence2(DefSome: DefSome,
  Ident: Seq[Ident],
  Def: Def)

object LDefSequence2 extends rt.ImplicitXMLWriter[LDefSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LDefSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LDefSequence2")      
  }
  
  def toXML(__obj: LDefSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(DefSome.toXML(__obj.DefSome, targetNamespace, Some("DefSome"), __scope),
        __obj.Ident.flatMap(x => Ident.toXML(x, targetNamespace, Some("Ident"), __scope)),
        Def.toXML(__obj.Def, targetNamespace, Some("Def"), __scope))
  }
}

case class LDefSequence3(LDefView: LDefView,
  Ident: Seq[Ident])

object LDefSequence3 extends rt.ImplicitXMLWriter[LDefSequence3] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LDefSequence3 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LDefSequence3")      
  }
  
  def toXML(__obj: LDefSequence3, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LDefView.toXML(__obj.LDefView, targetNamespace, Some("LDefView"), __scope),
        __obj.Ident.flatMap(x => Ident.toXML(x, targetNamespace, Some("Ident"), __scope)))
  }
}



case class DefAll()

object DefAll extends rt.ImplicitXMLWriter[DefAll] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): DefAll = seq match {
    case node: scala.xml.Node => DefAll()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: DefAll, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class DefSome()

object DefSome extends rt.ImplicitXMLWriter[DefSome] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): DefSome = seq match {
    case node: scala.xml.Node => DefSome()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: DefSome, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LDefView()

object LDefView extends rt.ImplicitXMLWriter[LDefView] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LDefView = seq match {
    case node: scala.xml.Node => LDefView()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LDefView, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Grammar(Grammar: Grammar,
  Def: Seq[Def])

object Grammar extends rt.ElemNameParser[Grammar] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Grammar] =
    (rt.ElemName(targetNamespace, "Grammar")) ~ 
      rep(rt.ElemName(targetNamespace, "Def")) ^^
        { case p1 ~ 
      p2 => Grammar(Grammar.fromXML(p1),
      p2.toList.map(x => Def.fromXML(x))) }
        
  def toXML(__obj: Grammar, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Seq.concat(Grammar.toXML(__obj.Grammar, targetNamespace, Some("Grammar"), __scope),
        __obj.Def.flatMap(x => Def.toXML(x, targetNamespace, Some("Def"), __scope))): _*)
  }
  

}



case class Def(arg1: rt.DataRecord[Any])

object Def extends rt.ElemNameParser[Def] {
  import DefSequence1._
  import DefSequence2._
  import DefSequence3._
  import DefSequence4._
  import DefSequence5._
  import DefSequence6._
  import DefSequence7._
  import DefSequence8._
  import DefSequence9._
  import DefSequence10._
  import DefSequence11._
  import DefSequence12._
  import DefSequence13._
  import DefSequence14._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Def] =
    ((((rt.ElemName(targetNamespace, "Rule")) ~ 
    (rt.ElemName(targetNamespace, "Label")) ~ 
    (rt.ElemName(targetNamespace, "Cat")) ~ 
    rep(rt.ElemName(targetNamespace, "Item"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 ~ 
      p4 => rt.DataRecord(None, None, DefSequence1(Rule.fromXML(p1),
      Label.fromXML(p2),
      Cat.fromXML(p3),
      p4.toList.map(x => Item.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "Comment")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, DefSequence2(Comment.fromXML(p1),
      StringType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "Comments")) ~ 
    (rt.ElemName(targetNamespace, "String")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, DefSequence3(Comments.fromXML(p1),
      StringType.fromXML(p2),
      StringType.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "Internal")) ~ 
    (rt.ElemName(targetNamespace, "Label")) ~ 
    (rt.ElemName(targetNamespace, "Cat")) ~ 
    rep(rt.ElemName(targetNamespace, "Item"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 ~ 
      p4 => rt.DataRecord(None, None, DefSequence4(Internal.fromXML(p1),
      Label.fromXML(p2),
      Cat.fromXML(p3),
      p4.toList.map(x => Item.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "Token")) ~ 
    (rt.ElemName(targetNamespace, "Ident")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, DefSequence5(Token.fromXML(p1),
      Ident.fromXML(p2),
      Reg.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "PosToken")) ~ 
    (rt.ElemName(targetNamespace, "Ident")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, DefSequence6(PosToken.fromXML(p1),
      Ident.fromXML(p2),
      Reg.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "Entryp")) ~ 
    rep(rt.ElemName(targetNamespace, "Ident"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, DefSequence7(Entryp.fromXML(p1),
      p2.toList.map(x => Ident.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "Separator")) ~ 
    (rt.ElemName(targetNamespace, "MinimumSize")) ~ 
    (rt.ElemName(targetNamespace, "Cat")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 ~ 
      p4 => rt.DataRecord(None, None, DefSequence8(Separator.fromXML(p1),
      MinimumSize.fromXML(p2),
      Cat.fromXML(p3),
      StringType.fromXML(p4))) }) ||| 
    (((rt.ElemName(targetNamespace, "Terminator")) ~ 
    (rt.ElemName(targetNamespace, "MinimumSize")) ~ 
    (rt.ElemName(targetNamespace, "Cat")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 ~ 
      p4 => rt.DataRecord(None, None, DefSequence9(Terminator.fromXML(p1),
      MinimumSize.fromXML(p2),
      Cat.fromXML(p3),
      StringType.fromXML(p4))) }) ||| 
    (((rt.ElemName(targetNamespace, "Coercions")) ~ 
    (rt.ElemName(targetNamespace, "Ident")) ~ 
    (rt.ElemName(targetNamespace, "Integer"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, DefSequence10(Coercions.fromXML(p1),
      Ident.fromXML(p2),
      Integer.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "Rules")) ~ 
    (rt.ElemName(targetNamespace, "Ident")) ~ 
    rep(rt.ElemName(targetNamespace, "RHS"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, DefSequence11(Rules.fromXML(p1),
      Ident.fromXML(p2),
      p3.toList.map(x => RHS.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "Function")) ~ 
    (rt.ElemName(targetNamespace, "Ident")) ~ 
    rep(rt.ElemName(targetNamespace, "Arg")) ~ 
    (rt.ElemName(targetNamespace, "Exp"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 ~ 
      p4 => rt.DataRecord(None, None, DefSequence12(FunctionType.fromXML(p1),
      Ident.fromXML(p2),
      p3.toList.map(x => Arg.fromXML(x)),
      Exp.fromXML(p4))) }) ||| 
    (((rt.ElemName(targetNamespace, "Layout")) ~ 
    rep(rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, DefSequence13(Layout.fromXML(p1),
      p2.toList.map(x => StringType.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "LayoutStop")) ~ 
    rep(rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, DefSequence14(LayoutStop.fromXML(p1),
      p2.toList.map(x => StringType.fromXML(x)))) }) ||| 
    ((rt.ElemName(targetNamespace, "LayoutTop")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), LayoutTop.fromXML(x.node))))) ^^
        { case p1 => Def(p1) }
        
  def toXML(__obj: Def, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (DefOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  DefOption

object DefOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence1 => DefSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence2 => DefSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence3 => DefSequence3.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence4 => DefSequence4.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence5 => DefSequence5.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence6 => DefSequence6.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence7 => DefSequence7.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence8 => DefSequence8.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence9 => DefSequence9.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence10 => DefSequence10.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence11 => DefSequence11.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence12 => DefSequence12.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence13 => DefSequence13.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: DefSequence14 => DefSequence14.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: LayoutTop => LayoutTop.toXML(x, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class DefSequence1(Rule: Rule,
  Label: Label,
  Cat: Cat,
  Item: Seq[Item])

object DefSequence1 extends rt.ImplicitXMLWriter[DefSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence1")      
  }
  
  def toXML(__obj: DefSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Rule.toXML(__obj.Rule, targetNamespace, Some("Rule"), __scope),
        Label.toXML(__obj.Label, targetNamespace, Some("Label"), __scope),
        Cat.toXML(__obj.Cat, targetNamespace, Some("Cat"), __scope),
        __obj.Item.flatMap(x => Item.toXML(x, targetNamespace, Some("Item"), __scope)))
  }
}

case class DefSequence2(Comment: Comment,
  String: StringType)

object DefSequence2 extends rt.ImplicitXMLWriter[DefSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence2")      
  }
  
  def toXML(__obj: DefSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Comment.toXML(__obj.Comment, targetNamespace, Some("Comment"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class DefSequence3(Comments: Comments,
  String: StringType,
  String: StringType)

object DefSequence3 extends rt.ImplicitXMLWriter[DefSequence3] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence3 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence3")      
  }
  
  def toXML(__obj: DefSequence3, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Comments.toXML(__obj.Comments, targetNamespace, Some("Comments"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class DefSequence4(Internal: Internal,
  Label: Label,
  Cat: Cat,
  Item: Seq[Item])

object DefSequence4 extends rt.ImplicitXMLWriter[DefSequence4] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence4 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence4")      
  }
  
  def toXML(__obj: DefSequence4, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Internal.toXML(__obj.Internal, targetNamespace, Some("Internal"), __scope),
        Label.toXML(__obj.Label, targetNamespace, Some("Label"), __scope),
        Cat.toXML(__obj.Cat, targetNamespace, Some("Cat"), __scope),
        __obj.Item.flatMap(x => Item.toXML(x, targetNamespace, Some("Item"), __scope)))
  }
}

case class DefSequence5(Token: Token,
  Ident: Ident,
  Reg: Reg)

object DefSequence5 extends rt.ImplicitXMLWriter[DefSequence5] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence5 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence5")      
  }
  
  def toXML(__obj: DefSequence5, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Token.toXML(__obj.Token, targetNamespace, Some("Token"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class DefSequence6(PosToken: PosToken,
  Ident: Ident,
  Reg: Reg)

object DefSequence6 extends rt.ImplicitXMLWriter[DefSequence6] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence6 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence6")      
  }
  
  def toXML(__obj: DefSequence6, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(PosToken.toXML(__obj.PosToken, targetNamespace, Some("PosToken"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class DefSequence7(Entryp: Entryp,
  Ident: Seq[Ident])

object DefSequence7 extends rt.ImplicitXMLWriter[DefSequence7] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence7 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence7")      
  }
  
  def toXML(__obj: DefSequence7, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Entryp.toXML(__obj.Entryp, targetNamespace, Some("Entryp"), __scope),
        __obj.Ident.flatMap(x => Ident.toXML(x, targetNamespace, Some("Ident"), __scope)))
  }
}

case class DefSequence8(Separator: Separator,
  MinimumSize: MinimumSize,
  Cat: Cat,
  String: StringType)

object DefSequence8 extends rt.ImplicitXMLWriter[DefSequence8] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence8 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence8")      
  }
  
  def toXML(__obj: DefSequence8, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Separator.toXML(__obj.Separator, targetNamespace, Some("Separator"), __scope),
        MinimumSize.toXML(__obj.MinimumSize, targetNamespace, Some("MinimumSize"), __scope),
        Cat.toXML(__obj.Cat, targetNamespace, Some("Cat"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class DefSequence9(Terminator: Terminator,
  MinimumSize: MinimumSize,
  Cat: Cat,
  String: StringType)

object DefSequence9 extends rt.ImplicitXMLWriter[DefSequence9] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence9 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence9")      
  }
  
  def toXML(__obj: DefSequence9, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Terminator.toXML(__obj.Terminator, targetNamespace, Some("Terminator"), __scope),
        MinimumSize.toXML(__obj.MinimumSize, targetNamespace, Some("MinimumSize"), __scope),
        Cat.toXML(__obj.Cat, targetNamespace, Some("Cat"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class DefSequence10(Coercions: Coercions,
  Ident: Ident,
  Integer: Integer)

object DefSequence10 extends rt.ImplicitXMLWriter[DefSequence10] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence10 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence10")      
  }
  
  def toXML(__obj: DefSequence10, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Coercions.toXML(__obj.Coercions, targetNamespace, Some("Coercions"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope),
        Integer.toXML(__obj.Integer, targetNamespace, Some("Integer"), __scope))
  }
}

case class DefSequence11(Rules: Rules,
  Ident: Ident,
  RHS: Seq[RHS])

object DefSequence11 extends rt.ImplicitXMLWriter[DefSequence11] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence11 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence11")      
  }
  
  def toXML(__obj: DefSequence11, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Rules.toXML(__obj.Rules, targetNamespace, Some("Rules"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope),
        __obj.RHS.flatMap(x => RHS.toXML(x, targetNamespace, Some("RHS"), __scope)))
  }
}

case class DefSequence12(Function: FunctionType,
  Ident: Ident,
  Arg: Seq[Arg],
  Exp: Exp)

object DefSequence12 extends rt.ImplicitXMLWriter[DefSequence12] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence12 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence12")      
  }
  
  def toXML(__obj: DefSequence12, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(FunctionType.toXML(__obj.Function, targetNamespace, Some("Function"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope),
        __obj.Arg.flatMap(x => Arg.toXML(x, targetNamespace, Some("Arg"), __scope)),
        Exp.toXML(__obj.Exp, targetNamespace, Some("Exp"), __scope))
  }
}

case class DefSequence13(Layout: Layout,
  String: Seq[StringType])

object DefSequence13 extends rt.ImplicitXMLWriter[DefSequence13] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence13 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence13")      
  }
  
  def toXML(__obj: DefSequence13, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Layout.toXML(__obj.Layout, targetNamespace, Some("Layout"), __scope),
        __obj.String.flatMap(x => StringType.toXML(x, targetNamespace, Some("String"), __scope)))
  }
}

case class DefSequence14(LayoutStop: LayoutStop,
  String: Seq[StringType])

object DefSequence14 extends rt.ImplicitXMLWriter[DefSequence14] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: DefSequence14 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected DefSequence14")      
  }
  
  def toXML(__obj: DefSequence14, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LayoutStop.toXML(__obj.LayoutStop, targetNamespace, Some("LayoutStop"), __scope),
        __obj.String.flatMap(x => StringType.toXML(x, targetNamespace, Some("String"), __scope)))
  }
}



case class Rule()

object Rule extends rt.ImplicitXMLWriter[Rule] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Rule = seq match {
    case node: scala.xml.Node => Rule()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Rule, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Comment()

object Comment extends rt.ImplicitXMLWriter[Comment] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Comment = seq match {
    case node: scala.xml.Node => Comment()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Comment, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Comments()

object Comments extends rt.ImplicitXMLWriter[Comments] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Comments = seq match {
    case node: scala.xml.Node => Comments()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Comments, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Internal()

object Internal extends rt.ImplicitXMLWriter[Internal] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Internal = seq match {
    case node: scala.xml.Node => Internal()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Internal, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Token()

object Token extends rt.ImplicitXMLWriter[Token] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Token = seq match {
    case node: scala.xml.Node => Token()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Token, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class PosToken()

object PosToken extends rt.ImplicitXMLWriter[PosToken] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): PosToken = seq match {
    case node: scala.xml.Node => PosToken()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: PosToken, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Entryp()

object Entryp extends rt.ImplicitXMLWriter[Entryp] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Entryp = seq match {
    case node: scala.xml.Node => Entryp()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Entryp, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Separator()

object Separator extends rt.ImplicitXMLWriter[Separator] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Separator = seq match {
    case node: scala.xml.Node => Separator()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Separator, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Terminator()

object Terminator extends rt.ImplicitXMLWriter[Terminator] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Terminator = seq match {
    case node: scala.xml.Node => Terminator()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Terminator, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Coercions()

object Coercions extends rt.ImplicitXMLWriter[Coercions] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Coercions = seq match {
    case node: scala.xml.Node => Coercions()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Coercions, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Rules()

object Rules extends rt.ImplicitXMLWriter[Rules] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Rules = seq match {
    case node: scala.xml.Node => Rules()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Rules, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class FunctionType()

object FunctionType extends rt.ImplicitXMLWriter[FunctionType] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): FunctionType = seq match {
    case node: scala.xml.Node => FunctionType()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: FunctionType, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Layout()

object Layout extends rt.ImplicitXMLWriter[Layout] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Layout = seq match {
    case node: scala.xml.Node => Layout()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Layout, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LayoutStop()

object LayoutStop extends rt.ImplicitXMLWriter[LayoutStop] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LayoutStop = seq match {
    case node: scala.xml.Node => LayoutStop()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LayoutStop, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LayoutTop() extends DefOption

object LayoutTop extends rt.ImplicitXMLWriter[LayoutTop] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LayoutTop = seq match {
    case node: scala.xml.Node => LayoutTop()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LayoutTop, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Item(arg1: rt.DataRecord[Any])

object Item extends rt.ElemNameParser[Item] {
  import ItemSequence1._
  import ItemSequence2._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Item] =
    ((((rt.ElemName(targetNamespace, "Terminal")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ItemSequence1(Terminal.fromXML(p1),
      StringType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "NTerminal")) ~ 
    (rt.ElemName(targetNamespace, "Cat"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ItemSequence2(NTerminal.fromXML(p1),
      Cat.fromXML(p2))) })) ^^
        { case p1 => Item(p1) }
        
  def toXML(__obj: Item, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (ItemOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  ItemOption

object ItemOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ItemSequence1 => ItemSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ItemSequence2 => ItemSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class ItemSequence1(Terminal: Terminal,
  String: StringType)

object ItemSequence1 extends rt.ImplicitXMLWriter[ItemSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ItemSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ItemSequence1")      
  }
  
  def toXML(__obj: ItemSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Terminal.toXML(__obj.Terminal, targetNamespace, Some("Terminal"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class ItemSequence2(NTerminal: NTerminal,
  Cat: Cat)

object ItemSequence2 extends rt.ImplicitXMLWriter[ItemSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ItemSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ItemSequence2")      
  }
  
  def toXML(__obj: ItemSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(NTerminal.toXML(__obj.NTerminal, targetNamespace, Some("NTerminal"), __scope),
        Cat.toXML(__obj.Cat, targetNamespace, Some("Cat"), __scope))
  }
}



case class Terminal()

object Terminal extends rt.ImplicitXMLWriter[Terminal] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Terminal = seq match {
    case node: scala.xml.Node => Terminal()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Terminal, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class NTerminal()

object NTerminal extends rt.ImplicitXMLWriter[NTerminal] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): NTerminal = seq match {
    case node: scala.xml.Node => NTerminal()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: NTerminal, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Cat(arg1: rt.DataRecord[Any])

object Cat extends rt.ElemNameParser[Cat] {
  import CatSequence1._
  import CatSequence2._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Cat] =
    ((((rt.ElemName(targetNamespace, "ListCat")) ~ 
    (rt.ElemName(targetNamespace, "Cat"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, CatSequence1(ListCat.fromXML(p1),
      Cat.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "IdCat")) ~ 
    (rt.ElemName(targetNamespace, "Ident"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, CatSequence2(IdCat.fromXML(p1),
      Ident.fromXML(p2))) })) ^^
        { case p1 => Cat(p1) }
        
  def toXML(__obj: Cat, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (CatOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  CatOption

object CatOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: CatSequence1 => CatSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: CatSequence2 => CatSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class CatSequence1(ListCat: ListCat,
  Cat: Cat)

object CatSequence1 extends rt.ImplicitXMLWriter[CatSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: CatSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected CatSequence1")      
  }
  
  def toXML(__obj: CatSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(ListCat.toXML(__obj.ListCat, targetNamespace, Some("ListCat"), __scope),
        Cat.toXML(__obj.Cat, targetNamespace, Some("Cat"), __scope))
  }
}

case class CatSequence2(IdCat: IdCat,
  Ident: Ident)

object CatSequence2 extends rt.ImplicitXMLWriter[CatSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: CatSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected CatSequence2")      
  }
  
  def toXML(__obj: CatSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(IdCat.toXML(__obj.IdCat, targetNamespace, Some("IdCat"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope))
  }
}



case class ListCat()

object ListCat extends rt.ImplicitXMLWriter[ListCat] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ListCat = seq match {
    case node: scala.xml.Node => ListCat()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ListCat, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class IdCat()

object IdCat extends rt.ImplicitXMLWriter[IdCat] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): IdCat = seq match {
    case node: scala.xml.Node => IdCat()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: IdCat, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Label(arg1: rt.DataRecord[Any])

object Label extends rt.ElemNameParser[Label] {
  import LabelSequence1._
  import LabelSequence2._
  import LabelSequence3._
  import LabelSequence4._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Label] =
    ((((rt.ElemName(targetNamespace, "LabNoP")) ~ 
    (rt.ElemName(targetNamespace, "LabelId"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, LabelSequence1(LabNoP.fromXML(p1),
      LabelId.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "LabP")) ~ 
    (rt.ElemName(targetNamespace, "LabelId")) ~ 
    rep(rt.ElemName(targetNamespace, "ProfItem"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, LabelSequence2(LabP.fromXML(p1),
      LabelId.fromXML(p2),
      p3.toList.map(x => ProfItem.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "LabPF")) ~ 
    (rt.ElemName(targetNamespace, "LabelId")) ~ 
    (rt.ElemName(targetNamespace, "LabelId")) ~ 
    rep(rt.ElemName(targetNamespace, "ProfItem"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 ~ 
      p4 => rt.DataRecord(None, None, LabelSequence3(LabPF.fromXML(p1),
      LabelId.fromXML(p2),
      LabelId.fromXML(p3),
      p4.toList.map(x => ProfItem.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "LabF")) ~ 
    (rt.ElemName(targetNamespace, "LabelId")) ~ 
    (rt.ElemName(targetNamespace, "LabelId"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, LabelSequence4(LabF.fromXML(p1),
      LabelId.fromXML(p2),
      LabelId.fromXML(p3))) })) ^^
        { case p1 => Label(p1) }
        
  def toXML(__obj: Label, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (LabelOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  LabelOption

object LabelOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelSequence1 => LabelSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: LabelSequence2 => LabelSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: LabelSequence3 => LabelSequence3.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: LabelSequence4 => LabelSequence4.toXML(__obj, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class LabelSequence1(LabNoP: LabNoP,
  LabelId: LabelId)

object LabelSequence1 extends rt.ImplicitXMLWriter[LabelSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LabelSequence1")      
  }
  
  def toXML(__obj: LabelSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LabNoP.toXML(__obj.LabNoP, targetNamespace, Some("LabNoP"), __scope),
        LabelId.toXML(__obj.LabelId, targetNamespace, Some("LabelId"), __scope))
  }
}

case class LabelSequence2(LabP: LabP,
  LabelId: LabelId,
  ProfItem: Seq[ProfItem])

object LabelSequence2 extends rt.ImplicitXMLWriter[LabelSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LabelSequence2")      
  }
  
  def toXML(__obj: LabelSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LabP.toXML(__obj.LabP, targetNamespace, Some("LabP"), __scope),
        LabelId.toXML(__obj.LabelId, targetNamespace, Some("LabelId"), __scope),
        __obj.ProfItem.flatMap(x => ProfItem.toXML(x, targetNamespace, Some("ProfItem"), __scope)))
  }
}

case class LabelSequence3(LabPF: LabPF,
  LabelId: LabelId,
  LabelId: LabelId,
  ProfItem: Seq[ProfItem])

object LabelSequence3 extends rt.ImplicitXMLWriter[LabelSequence3] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelSequence3 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LabelSequence3")      
  }
  
  def toXML(__obj: LabelSequence3, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LabPF.toXML(__obj.LabPF, targetNamespace, Some("LabPF"), __scope),
        LabelId.toXML(__obj.LabelId, targetNamespace, Some("LabelId"), __scope),
        LabelId.toXML(__obj.LabelId, targetNamespace, Some("LabelId"), __scope),
        __obj.ProfItem.flatMap(x => ProfItem.toXML(x, targetNamespace, Some("ProfItem"), __scope)))
  }
}

case class LabelSequence4(LabF: LabF,
  LabelId: LabelId,
  LabelId: LabelId)

object LabelSequence4 extends rt.ImplicitXMLWriter[LabelSequence4] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelSequence4 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LabelSequence4")      
  }
  
  def toXML(__obj: LabelSequence4, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LabF.toXML(__obj.LabF, targetNamespace, Some("LabF"), __scope),
        LabelId.toXML(__obj.LabelId, targetNamespace, Some("LabelId"), __scope),
        LabelId.toXML(__obj.LabelId, targetNamespace, Some("LabelId"), __scope))
  }
}



case class LabNoP()

object LabNoP extends rt.ImplicitXMLWriter[LabNoP] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LabNoP = seq match {
    case node: scala.xml.Node => LabNoP()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LabNoP, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LabP()

object LabP extends rt.ImplicitXMLWriter[LabP] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LabP = seq match {
    case node: scala.xml.Node => LabP()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LabP, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LabPF()

object LabPF extends rt.ImplicitXMLWriter[LabPF] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LabPF = seq match {
    case node: scala.xml.Node => LabPF()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LabPF, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LabF()

object LabF extends rt.ImplicitXMLWriter[LabF] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LabF = seq match {
    case node: scala.xml.Node => LabF()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LabF, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LabelId(arg1: rt.DataRecord[Any])

object LabelId extends rt.ElemNameParser[LabelId] {
  import LabelIdSequence1._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[LabelId] =
    ((((rt.ElemName(targetNamespace, "Id")) ~ 
    (rt.ElemName(targetNamespace, "Ident"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, LabelIdSequence1(Id.fromXML(p1),
      Ident.fromXML(p2))) }) ||| 
    ((rt.ElemName(targetNamespace, "Wild")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), Wild.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "ListE")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), ListE.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "ListCons")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), ListCons.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "ListOne")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), ListOne.fromXML(x.node))))) ^^
        { case p1 => LabelId(p1) }
        
  def toXML(__obj: LabelId, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (LabelIdOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  LabelIdOption

object LabelIdOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelIdSequence1 => LabelIdSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: Wild => Wild.toXML(x, __namespace, __elementLabel, __scope)
    case x: ListE => ListE.toXML(x, __namespace, __elementLabel, __scope)
    case x: ListCons => ListCons.toXML(x, __namespace, __elementLabel, __scope)
    case x: ListOne => ListOne.toXML(x, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class LabelIdSequence1(Id: Id,
  Ident: Ident)

object LabelIdSequence1 extends rt.ImplicitXMLWriter[LabelIdSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: LabelIdSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected LabelIdSequence1")      
  }
  
  def toXML(__obj: LabelIdSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Id.toXML(__obj.Id, targetNamespace, Some("Id"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope))
  }
}



case class Id()

object Id extends rt.ImplicitXMLWriter[Id] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Id = seq match {
    case node: scala.xml.Node => Id()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Id, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Wild() extends LabelIdOption

object Wild extends rt.ImplicitXMLWriter[Wild] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Wild = seq match {
    case node: scala.xml.Node => Wild()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Wild, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class ListE() extends LabelIdOption

object ListE extends rt.ImplicitXMLWriter[ListE] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ListE = seq match {
    case node: scala.xml.Node => ListE()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ListE, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class ListCons() extends LabelIdOption

object ListCons extends rt.ImplicitXMLWriter[ListCons] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ListCons = seq match {
    case node: scala.xml.Node => ListCons()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ListCons, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class ListOne() extends LabelIdOption

object ListOne extends rt.ImplicitXMLWriter[ListOne] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ListOne = seq match {
    case node: scala.xml.Node => ListOne()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ListOne, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class ProfItem(ProfIt: ProfIt,
  IntList: Seq[IntList],
  Integer: Seq[Integer])

object ProfItem extends rt.ElemNameParser[ProfItem] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[ProfItem] =
    (rt.ElemName(targetNamespace, "ProfIt")) ~ 
      rep(rt.ElemName(targetNamespace, "IntList")) ~ 
      rep(rt.ElemName(targetNamespace, "Integer")) ^^
        { case p1 ~ 
      p2 ~ 
      p3 => ProfItem(ProfIt.fromXML(p1),
      p2.toList.map(x => IntList.fromXML(x)),
      p3.toList.map(x => Integer.fromXML(x))) }
        
  def toXML(__obj: ProfItem, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Seq.concat(ProfIt.toXML(__obj.ProfIt, targetNamespace, Some("ProfIt"), __scope),
        __obj.IntList.flatMap(x => IntList.toXML(x, targetNamespace, Some("IntList"), __scope)),
        __obj.Integer.flatMap(x => Integer.toXML(x, targetNamespace, Some("Integer"), __scope))): _*)
  }
  

}



case class ProfIt()

object ProfIt extends rt.ImplicitXMLWriter[ProfIt] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ProfIt = seq match {
    case node: scala.xml.Node => ProfIt()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ProfIt, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class IntList(Ints: Ints,
  Integer: Seq[Integer])

object IntList extends rt.ElemNameParser[IntList] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[IntList] =
    (rt.ElemName(targetNamespace, "Ints")) ~ 
      rep(rt.ElemName(targetNamespace, "Integer")) ^^
        { case p1 ~ 
      p2 => IntList(Ints.fromXML(p1),
      p2.toList.map(x => Integer.fromXML(x))) }
        
  def toXML(__obj: IntList, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Seq.concat(Ints.toXML(__obj.Ints, targetNamespace, Some("Ints"), __scope),
        __obj.Integer.flatMap(x => Integer.toXML(x, targetNamespace, Some("Integer"), __scope))): _*)
  }
  

}



case class Ints()

object Ints extends rt.ImplicitXMLWriter[Ints] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Ints = seq match {
    case node: scala.xml.Node => Ints()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Ints, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Arg(Arg: Arg,
  Ident: Ident)

object Arg extends rt.ElemNameParser[Arg] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Arg] =
    (rt.ElemName(targetNamespace, "Arg")) ~ 
      (rt.ElemName(targetNamespace, "Ident")) ^^
        { case p1 ~ 
      p2 => Arg(Arg.fromXML(p1),
      Ident.fromXML(p2)) }
        
  def toXML(__obj: Arg, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Seq.concat(Arg.toXML(__obj.Arg, targetNamespace, Some("Arg"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope)): _*)
  }
  

}



case class Exp(arg1: rt.DataRecord[Any])

object Exp extends rt.ElemNameParser[Exp] {
  import ExpSequence1._
  import ExpSequence2._
  import ExpSequence3._
  import ExpSequence4._
  import ExpSequence5._
  import ExpSequence6._
  import ExpSequence7._
  import ExpSequence8._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Exp] =
    ((((rt.ElemName(targetNamespace, "Cons")) ~ 
    (rt.ElemName(targetNamespace, "Exp")) ~ 
    (rt.ElemName(targetNamespace, "Exp"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, ExpSequence1(Cons.fromXML(p1),
      Exp.fromXML(p2),
      Exp.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "App")) ~ 
    (rt.ElemName(targetNamespace, "Ident")) ~ 
    rep(rt.ElemName(targetNamespace, "Exp"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, ExpSequence2(App.fromXML(p1),
      Ident.fromXML(p2),
      p3.toList.map(x => Exp.fromXML(x)))) }) ||| 
    (((rt.ElemName(targetNamespace, "Var")) ~ 
    (rt.ElemName(targetNamespace, "Ident"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ExpSequence3(Var.fromXML(p1),
      Ident.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "LitInt")) ~ 
    (rt.ElemName(targetNamespace, "Integer"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ExpSequence4(LitInt.fromXML(p1),
      Integer.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "LitChar")) ~ 
    (rt.ElemName(targetNamespace, "Char"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ExpSequence5(LitChar.fromXML(p1),
      CharType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "LitString")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ExpSequence6(LitString.fromXML(p1),
      StringType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "LitDouble")) ~ 
    (rt.ElemName(targetNamespace, "Double"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ExpSequence7(LitDouble.fromXML(p1),
      DoubleType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "List")) ~ 
    rep(rt.ElemName(targetNamespace, "Exp"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, ExpSequence8(ListType.fromXML(p1),
      p2.toList.map(x => Exp.fromXML(x)))) })) ^^
        { case p1 => Exp(p1) }
        
  def toXML(__obj: Exp, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (ExpOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  ExpOption

object ExpOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence1 => ExpSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence2 => ExpSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence3 => ExpSequence3.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence4 => ExpSequence4.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence5 => ExpSequence5.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence6 => ExpSequence6.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence7 => ExpSequence7.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: ExpSequence8 => ExpSequence8.toXML(__obj, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class ExpSequence1(Cons: Cons,
  Exp: Exp,
  Exp: Exp)

object ExpSequence1 extends rt.ImplicitXMLWriter[ExpSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence1")      
  }
  
  def toXML(__obj: ExpSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Cons.toXML(__obj.Cons, targetNamespace, Some("Cons"), __scope),
        Exp.toXML(__obj.Exp, targetNamespace, Some("Exp"), __scope),
        Exp.toXML(__obj.Exp, targetNamespace, Some("Exp"), __scope))
  }
}

case class ExpSequence2(App: App,
  Ident: Ident,
  Exp: Seq[Exp])

object ExpSequence2 extends rt.ImplicitXMLWriter[ExpSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence2")      
  }
  
  def toXML(__obj: ExpSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(App.toXML(__obj.App, targetNamespace, Some("App"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope),
        __obj.Exp.flatMap(x => Exp.toXML(x, targetNamespace, Some("Exp"), __scope)))
  }
}

case class ExpSequence3(Var: Var,
  Ident: Ident)

object ExpSequence3 extends rt.ImplicitXMLWriter[ExpSequence3] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence3 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence3")      
  }
  
  def toXML(__obj: ExpSequence3, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(Var.toXML(__obj.Var, targetNamespace, Some("Var"), __scope),
        Ident.toXML(__obj.Ident, targetNamespace, Some("Ident"), __scope))
  }
}

case class ExpSequence4(LitInt: LitInt,
  Integer: Integer)

object ExpSequence4 extends rt.ImplicitXMLWriter[ExpSequence4] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence4 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence4")      
  }
  
  def toXML(__obj: ExpSequence4, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LitInt.toXML(__obj.LitInt, targetNamespace, Some("LitInt"), __scope),
        Integer.toXML(__obj.Integer, targetNamespace, Some("Integer"), __scope))
  }
}

case class ExpSequence5(LitChar: LitChar,
  Char: CharType)

object ExpSequence5 extends rt.ImplicitXMLWriter[ExpSequence5] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence5 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence5")      
  }
  
  def toXML(__obj: ExpSequence5, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LitChar.toXML(__obj.LitChar, targetNamespace, Some("LitChar"), __scope),
        CharType.toXML(__obj.Char, targetNamespace, Some("Char"), __scope))
  }
}

case class ExpSequence6(LitString: LitString,
  String: StringType)

object ExpSequence6 extends rt.ImplicitXMLWriter[ExpSequence6] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence6 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence6")      
  }
  
  def toXML(__obj: ExpSequence6, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LitString.toXML(__obj.LitString, targetNamespace, Some("LitString"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class ExpSequence7(LitDouble: LitDouble,
  Double: DoubleType)

object ExpSequence7 extends rt.ImplicitXMLWriter[ExpSequence7] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence7 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence7")      
  }
  
  def toXML(__obj: ExpSequence7, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(LitDouble.toXML(__obj.LitDouble, targetNamespace, Some("LitDouble"), __scope),
        DoubleType.toXML(__obj.Double, targetNamespace, Some("Double"), __scope))
  }
}

case class ExpSequence8(List: ListType,
  Exp: Seq[Exp])

object ExpSequence8 extends rt.ImplicitXMLWriter[ExpSequence8] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: ExpSequence8 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected ExpSequence8")      
  }
  
  def toXML(__obj: ExpSequence8, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(ListType.toXML(__obj.List, targetNamespace, Some("List"), __scope),
        __obj.Exp.flatMap(x => Exp.toXML(x, targetNamespace, Some("Exp"), __scope)))
  }
}



case class Cons()

object Cons extends rt.ImplicitXMLWriter[Cons] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Cons = seq match {
    case node: scala.xml.Node => Cons()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Cons, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class App()

object App extends rt.ImplicitXMLWriter[App] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): App = seq match {
    case node: scala.xml.Node => App()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: App, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Var()

object Var extends rt.ImplicitXMLWriter[Var] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): Var = seq match {
    case node: scala.xml.Node => Var()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: Var, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LitInt()

object LitInt extends rt.ImplicitXMLWriter[LitInt] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LitInt = seq match {
    case node: scala.xml.Node => LitInt()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LitInt, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LitChar()

object LitChar extends rt.ImplicitXMLWriter[LitChar] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LitChar = seq match {
    case node: scala.xml.Node => LitChar()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LitChar, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LitString()

object LitString extends rt.ImplicitXMLWriter[LitString] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LitString = seq match {
    case node: scala.xml.Node => LitString()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LitString, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class LitDouble()

object LitDouble extends rt.ImplicitXMLWriter[LitDouble] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): LitDouble = seq match {
    case node: scala.xml.Node => LitDouble()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: LitDouble, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class ListType()

object ListType extends rt.ImplicitXMLWriter[ListType] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ListType = seq match {
    case node: scala.xml.Node => ListType()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ListType, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RHS(RHS: RHS,
  Item: Seq[Item])

object RHS extends rt.ElemNameParser[RHS] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[RHS] =
    (rt.ElemName(targetNamespace, "RHS")) ~ 
      rep(rt.ElemName(targetNamespace, "Item")) ^^
        { case p1 ~ 
      p2 => RHS(RHS.fromXML(p1),
      p2.toList.map(x => Item.fromXML(x))) }
        
  def toXML(__obj: RHS, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Seq.concat(RHS.toXML(__obj.RHS, targetNamespace, Some("RHS"), __scope),
        __obj.Item.flatMap(x => Item.toXML(x, targetNamespace, Some("Item"), __scope))): _*)
  }
  

}



case class MinimumSize(arg1: rt.DataRecord[Any])

object MinimumSize extends rt.ElemNameParser[MinimumSize] {
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[MinimumSize] =
    (((rt.ElemName(targetNamespace, "MNonempty")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), MNonempty.fromXML(x.node)))) | 
    ((rt.ElemName(targetNamespace, "MEmpty")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), MEmpty.fromXML(x.node))))) ^^
        { case p1 => MinimumSize(p1) }
        
  def toXML(__obj: MinimumSize, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (MinimumSizeOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  MinimumSizeOption

object MinimumSizeOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: MNonempty => MNonempty.toXML(x, __namespace, __elementLabel, __scope)
    case x: MEmpty => MEmpty.toXML(x, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}



case class MNonempty() extends MinimumSizeOption

object MNonempty extends rt.ImplicitXMLWriter[MNonempty] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): MNonempty = seq match {
    case node: scala.xml.Node => MNonempty()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: MNonempty, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class MEmpty() extends MinimumSizeOption

object MEmpty extends rt.ImplicitXMLWriter[MEmpty] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): MEmpty = seq match {
    case node: scala.xml.Node => MEmpty()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: MEmpty, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class Reg(arg1: rt.DataRecord[Any])

object Reg extends rt.ElemNameParser[Reg] {
  import RegSequence1._
  import RegSequence2._
  import RegSequence3._
  import RegSequence4._
  import RegSequence5._
  import RegSequence6._
  import RegSequence7._
  import RegSequence8._
  import RegSequence9._
  val targetNamespace: Option[String] = None
  
  def parser(node: scala.xml.Node): Parser[Reg] =
    ((((rt.ElemName(targetNamespace, "RSeq")) ~ 
    (rt.ElemName(targetNamespace, "Reg")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, RegSequence1(RSeq.fromXML(p1),
      Reg.fromXML(p2),
      Reg.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "RAlt")) ~ 
    (rt.ElemName(targetNamespace, "Reg")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, RegSequence2(RAlt.fromXML(p1),
      Reg.fromXML(p2),
      Reg.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "RMinus")) ~ 
    (rt.ElemName(targetNamespace, "Reg")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 ~ 
      p3 => rt.DataRecord(None, None, RegSequence3(RMinus.fromXML(p1),
      Reg.fromXML(p2),
      Reg.fromXML(p3))) }) ||| 
    (((rt.ElemName(targetNamespace, "RStar")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, RegSequence4(RStar.fromXML(p1),
      Reg.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "RPlus")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, RegSequence5(RPlus.fromXML(p1),
      Reg.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "ROpt")) ~ 
    (rt.ElemName(targetNamespace, "Reg"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, RegSequence6(ROpt.fromXML(p1),
      Reg.fromXML(p2))) }) ||| 
    ((rt.ElemName(targetNamespace, "REps")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), REps.fromXML(x.node)))) ||| 
    (((rt.ElemName(targetNamespace, "RChar")) ~ 
    (rt.ElemName(targetNamespace, "Char"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, RegSequence7(RChar.fromXML(p1),
      CharType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "RAlts")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, RegSequence8(RAlts.fromXML(p1),
      StringType.fromXML(p2))) }) ||| 
    (((rt.ElemName(targetNamespace, "RSeqs")) ~ 
    (rt.ElemName(targetNamespace, "String"))) ^^ 
      { case p1 ~ 
      p2 => rt.DataRecord(None, None, RegSequence9(RSeqs.fromXML(p1),
      StringType.fromXML(p2))) }) ||| 
    ((rt.ElemName(targetNamespace, "RDigit")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), RDigit.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "RLetter")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), RLetter.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "RUpper")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), RUpper.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "RLower")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), RLower.fromXML(x.node)))) ||| 
    ((rt.ElemName(targetNamespace, "RAny")) ^^ 
      (x => rt.DataRecord(x.namespace, Some(x.name), RAny.fromXML(x.node))))) ^^
        { case p1 => Reg(p1) }
        
  def toXML(__obj: Reg, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      (RegOption.toXML(__obj.arg1, targetNamespace, __obj.arg1.key, __scope)): _*)
  }
  

}

trait  RegOption

object RegOption {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence1 => RegSequence1.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence2 => RegSequence2.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence3 => RegSequence3.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence4 => RegSequence4.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence5 => RegSequence5.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence6 => RegSequence6.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence7 => RegSequence7.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence8 => RegSequence8.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: RegSequence9 => RegSequence9.toXML(__obj, __namespace, __elementLabel, __scope)
    case x: REps => REps.toXML(x, __namespace, __elementLabel, __scope)
    case x: RDigit => RDigit.toXML(x, __namespace, __elementLabel, __scope)
    case x: RLetter => RLetter.toXML(x, __namespace, __elementLabel, __scope)
    case x: RUpper => RUpper.toXML(x, __namespace, __elementLabel, __scope)
    case x: RLower => RLower.toXML(x, __namespace, __elementLabel, __scope)
    case x: RAny => RAny.toXML(x, __namespace, __elementLabel, __scope)
    case _ => rt.DataRecord.toXML(__obj, __namespace, __elementLabel, __scope)
  }  
}

case class RegSequence1(RSeq: RSeq,
  Reg: Reg,
  Reg: Reg)

object RegSequence1 extends rt.ImplicitXMLWriter[RegSequence1] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence1 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence1")      
  }
  
  def toXML(__obj: RegSequence1, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RSeq.toXML(__obj.RSeq, targetNamespace, Some("RSeq"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class RegSequence2(RAlt: RAlt,
  Reg: Reg,
  Reg: Reg)

object RegSequence2 extends rt.ImplicitXMLWriter[RegSequence2] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence2 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence2")      
  }
  
  def toXML(__obj: RegSequence2, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RAlt.toXML(__obj.RAlt, targetNamespace, Some("RAlt"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class RegSequence3(RMinus: RMinus,
  Reg: Reg,
  Reg: Reg)

object RegSequence3 extends rt.ImplicitXMLWriter[RegSequence3] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence3 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence3")      
  }
  
  def toXML(__obj: RegSequence3, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RMinus.toXML(__obj.RMinus, targetNamespace, Some("RMinus"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class RegSequence4(RStar: RStar,
  Reg: Reg)

object RegSequence4 extends rt.ImplicitXMLWriter[RegSequence4] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence4 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence4")      
  }
  
  def toXML(__obj: RegSequence4, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RStar.toXML(__obj.RStar, targetNamespace, Some("RStar"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class RegSequence5(RPlus: RPlus,
  Reg: Reg)

object RegSequence5 extends rt.ImplicitXMLWriter[RegSequence5] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence5 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence5")      
  }
  
  def toXML(__obj: RegSequence5, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RPlus.toXML(__obj.RPlus, targetNamespace, Some("RPlus"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class RegSequence6(ROpt: ROpt,
  Reg: Reg)

object RegSequence6 extends rt.ImplicitXMLWriter[RegSequence6] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence6 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence6")      
  }
  
  def toXML(__obj: RegSequence6, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(ROpt.toXML(__obj.ROpt, targetNamespace, Some("ROpt"), __scope),
        Reg.toXML(__obj.Reg, targetNamespace, Some("Reg"), __scope))
  }
}

case class RegSequence7(RChar: RChar,
  Char: CharType)

object RegSequence7 extends rt.ImplicitXMLWriter[RegSequence7] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence7 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence7")      
  }
  
  def toXML(__obj: RegSequence7, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RChar.toXML(__obj.RChar, targetNamespace, Some("RChar"), __scope),
        CharType.toXML(__obj.Char, targetNamespace, Some("Char"), __scope))
  }
}

case class RegSequence8(RAlts: RAlts,
  String: StringType)

object RegSequence8 extends rt.ImplicitXMLWriter[RegSequence8] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence8 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence8")      
  }
  
  def toXML(__obj: RegSequence8, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RAlts.toXML(__obj.RAlts, targetNamespace, Some("RAlts"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}

case class RegSequence9(RSeqs: RSeqs,
  String: StringType)

object RegSequence9 extends rt.ImplicitXMLWriter[RegSequence9] {
  val targetNamespace: Option[String] = None
  
  def toXML(__obj: rt.DataRecord[Any], __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = __obj.value match {
    case x: RegSequence9 => toXML(x, __namespace, __elementLabel, __scope)
    case _ => error("Expected RegSequence9")      
  }
  
  def toXML(__obj: RegSequence9, __namespace: Option[String], __elementLabel: Option[String],
      __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    Seq.concat(RSeqs.toXML(__obj.RSeqs, targetNamespace, Some("RSeqs"), __scope),
        StringType.toXML(__obj.String, targetNamespace, Some("String"), __scope))
  }
}



case class RSeq()

object RSeq extends rt.ImplicitXMLWriter[RSeq] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RSeq = seq match {
    case node: scala.xml.Node => RSeq()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RSeq, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RAlt()

object RAlt extends rt.ImplicitXMLWriter[RAlt] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RAlt = seq match {
    case node: scala.xml.Node => RAlt()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RAlt, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RMinus()

object RMinus extends rt.ImplicitXMLWriter[RMinus] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RMinus = seq match {
    case node: scala.xml.Node => RMinus()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RMinus, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RStar()

object RStar extends rt.ImplicitXMLWriter[RStar] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RStar = seq match {
    case node: scala.xml.Node => RStar()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RStar, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RPlus()

object RPlus extends rt.ImplicitXMLWriter[RPlus] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RPlus = seq match {
    case node: scala.xml.Node => RPlus()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RPlus, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class ROpt()

object ROpt extends rt.ImplicitXMLWriter[ROpt] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): ROpt = seq match {
    case node: scala.xml.Node => ROpt()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: ROpt, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class REps() extends RegOption

object REps extends rt.ImplicitXMLWriter[REps] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): REps = seq match {
    case node: scala.xml.Node => REps()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: REps, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RChar()

object RChar extends rt.ImplicitXMLWriter[RChar] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RChar = seq match {
    case node: scala.xml.Node => RChar()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RChar, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RAlts()

object RAlts extends rt.ImplicitXMLWriter[RAlts] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RAlts = seq match {
    case node: scala.xml.Node => RAlts()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RAlts, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RSeqs()

object RSeqs extends rt.ImplicitXMLWriter[RSeqs] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RSeqs = seq match {
    case node: scala.xml.Node => RSeqs()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RSeqs, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RDigit() extends RegOption

object RDigit extends rt.ImplicitXMLWriter[RDigit] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RDigit = seq match {
    case node: scala.xml.Node => RDigit()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RDigit, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RLetter() extends RegOption

object RLetter extends rt.ImplicitXMLWriter[RLetter] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RLetter = seq match {
    case node: scala.xml.Node => RLetter()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RLetter, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RUpper() extends RegOption

object RUpper extends rt.ImplicitXMLWriter[RUpper] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RUpper = seq match {
    case node: scala.xml.Node => RUpper()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RUpper, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RLower() extends RegOption

object RLower extends rt.ImplicitXMLWriter[RLower] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RLower = seq match {
    case node: scala.xml.Node => RLower()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RLower, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}



case class RAny() extends RegOption

object RAny extends rt.ImplicitXMLWriter[RAny] {
  val targetNamespace: Option[String] = None
  
  def fromXML(seq: scala.xml.NodeSeq): RAny = seq match {
    case node: scala.xml.Node => RAny()
    case _ => error("fromXML failed: seq must be scala.xml.Node")
  }
  
  def toXML(__obj: RAny, __namespace: Option[String], __elementLabel: Option[String], __scope: scala.xml.NamespaceBinding): scala.xml.NodeSeq = {
    var attribute: scala.xml.MetaData  = scala.xml.Null
    
    scala.xml.Elem(rt.Helper.getPrefix(__namespace, __scope).orNull,
      __elementLabel getOrElse { error("missing element label.") },
      attribute, __scope,
      Nil: _*)
  }
  

}


