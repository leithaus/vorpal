// This JLex file was machine-generated by the BNF converter
package com.biosimilarity.lift.model.vorpal;
import java_cup.runtime.*;


public class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() { return new String(yy_buffer,yy_buffer_index,10).trim(); }
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int STRING = 5;
	private final int ESCAPED = 6;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int CHAREND = 4;
	private final int CHARESC = 3;
	private final int CHAR = 2;
	private final int yy_state_dtrans[] = {
		0,
		78,
		80,
		82,
		84,
		86,
		88
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NOT_ACCEPT,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NOT_ACCEPT,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NOT_ACCEPT,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NOT_ACCEPT,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NOT_ACCEPT,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NOT_ACCEPT,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NOT_ACCEPT,
		/* 81 */ YY_NO_ANCHOR,
		/* 82 */ YY_NOT_ACCEPT,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NOT_ACCEPT,
		/* 85 */ YY_NO_ANCHOR,
		/* 86 */ YY_NOT_ACCEPT,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NOT_ACCEPT,
		/* 89 */ YY_NO_ANCHOR,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NO_ANCHOR,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NO_ANCHOR,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NO_ANCHOR,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NO_ANCHOR,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NO_ANCHOR,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NO_ANCHOR,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NO_ANCHOR,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NO_ANCHOR,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NO_ANCHOR,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NO_ANCHOR,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NO_ANCHOR,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NO_ANCHOR,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NO_ANCHOR,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NO_ANCHOR,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NO_ANCHOR,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NO_ANCHOR,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NO_ANCHOR,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NO_ANCHOR,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NO_ANCHOR,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NO_ANCHOR,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NO_ANCHOR,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NO_ANCHOR,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NO_ANCHOR,
		/* 136 */ YY_NO_ANCHOR,
		/* 137 */ YY_NO_ANCHOR,
		/* 138 */ YY_NO_ANCHOR,
		/* 139 */ YY_NO_ANCHOR,
		/* 140 */ YY_NO_ANCHOR,
		/* 141 */ YY_NO_ANCHOR,
		/* 142 */ YY_NO_ANCHOR,
		/* 143 */ YY_NO_ANCHOR,
		/* 144 */ YY_NO_ANCHOR,
		/* 145 */ YY_NO_ANCHOR,
		/* 146 */ YY_NO_ANCHOR,
		/* 147 */ YY_NO_ANCHOR,
		/* 148 */ YY_NO_ANCHOR,
		/* 149 */ YY_NO_ANCHOR,
		/* 150 */ YY_NO_ANCHOR,
		/* 151 */ YY_NO_ANCHOR,
		/* 152 */ YY_NO_ANCHOR,
		/* 153 */ YY_NO_ANCHOR,
		/* 154 */ YY_NO_ANCHOR,
		/* 155 */ YY_NO_ANCHOR,
		/* 156 */ YY_NO_ANCHOR,
		/* 157 */ YY_NO_ANCHOR,
		/* 158 */ YY_NO_ANCHOR,
		/* 159 */ YY_NO_ANCHOR,
		/* 160 */ YY_NO_ANCHOR,
		/* 161 */ YY_NO_ANCHOR,
		/* 162 */ YY_NO_ANCHOR,
		/* 163 */ YY_NO_ANCHOR,
		/* 164 */ YY_NO_ANCHOR,
		/* 165 */ YY_NO_ANCHOR,
		/* 166 */ YY_NO_ANCHOR,
		/* 167 */ YY_NO_ANCHOR,
		/* 168 */ YY_NO_ANCHOR,
		/* 169 */ YY_NO_ANCHOR,
		/* 170 */ YY_NO_ANCHOR,
		/* 171 */ YY_NO_ANCHOR,
		/* 172 */ YY_NO_ANCHOR,
		/* 173 */ YY_NO_ANCHOR,
		/* 174 */ YY_NO_ANCHOR,
		/* 175 */ YY_NO_ANCHOR,
		/* 176 */ YY_NO_ANCHOR,
		/* 177 */ YY_NO_ANCHOR,
		/* 178 */ YY_NO_ANCHOR,
		/* 179 */ YY_NO_ANCHOR,
		/* 180 */ YY_NO_ANCHOR,
		/* 181 */ YY_NO_ANCHOR,
		/* 182 */ YY_NO_ANCHOR,
		/* 183 */ YY_NO_ANCHOR,
		/* 184 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"41:9,48,40,41,48,39,41:18,48,41,42,41:4,44,8,9,13,14,10,12,3,41,45:10,1,2,4" +
"1,4,41,15,41,46:26,5,43,6,41,7,41,20,47,18,29,23,30,31,19,24,47,37,34,27,25" +
",22,33,47,21,26,28,35,38,36,47,32,47,16,11,17,41:66,46:23,41,46:7,47:24,41," +
"47:8,41:65280,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,185,
"0,1,2,1:10,3,1:3,4,1,5,1:3,6,1:3,7,8,7:20,1:17,9,10,11,12,13,14,15,16,17,18" +
",11,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42" +
",43,44,7,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66," +
"67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91," +
"92,93,94,95,96,97,7,98,99,100,101,102,103,104,105,106,107,108,109,110,111,1" +
"12,113,114,115,116,117,118,119,120,121,122,123,124")[0];

	private int yy_nxt[][] = unpackFromString(125,49,
"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,157:2,171,157,100,176,177,1" +
"78,157,179,180,157:3,181,182,183,157:2,184,20:2,-1,21,-1,22,23,157:2,20,-1:" +
"50,66,-1:59,70,-1:48,24,-1:43,157,-1:10,157,101,157:2,102,157:16,-1:5,157,1" +
"03:2,157,-1:4,72,-1:41,23,-1:10,157,-1:10,157:21,-1:5,157,103:2,157,-1:24,7" +
"4,-1:21,28,-1:7,25,-1:51,157,-1:10,157:8,27,157:12,-1:5,157,103:2,157,-1:46" +
",68,-1:20,51,-1:32,70:39,26,70:8,-1:7,157,-1:10,157:3,29,157:17,-1:5,157,10" +
"3:2,157,-1:46,28,-1:10,157,-1:10,157:15,30,157:5,-1:5,157,103:2,157,-1:13,7" +
"6,-1:32,68,-1:10,157,-1:10,157:8,31,157:12,-1:5,157,103:2,157,-1:8,157,-1:1" +
"0,157:7,32,157:13,-1:5,157,103:2,157,-1,1,49:11,69,49:26,-1,50,49:8,-1:7,15" +
"7,-1:10,157:10,33,157:10,-1:5,157,103:2,157,-1,1,52:42,53,-1,52:4,-1:7,157," +
"-1:10,157:3,34,157:17,-1:5,157,103:2,157,-1,1,54:24,55,54:2,56,54:10,-1:2,5" +
"4:8,-1:7,157,-1:10,157:3,35,157:17,-1:5,157,103:2,157,-1,1,-1:43,57,-1:11,1" +
"57,-1:10,157:8,36,157:12,-1:5,157,103:2,157,-1,1,58:38,-1:2,58,59,60,58:5,-" +
"1:7,157,-1:10,157:5,37,157:15,-1:5,157,103:2,157,-1,1,61:24,62,61:2,63,61:1" +
"0,-1:2,61,64,65,61:5,-1:7,157,-1:10,157:10,38,157:10,-1:5,157,103:2,157,-1:" +
"8,157,-1:10,157:3,39,157:17,-1:5,157,103:2,157,-1:8,157,-1:10,157:10,40,157" +
":10,-1:5,157,103:2,157,-1:8,157,-1:10,157:16,41,157:4,-1:5,157,103:2,157,-1" +
":8,157,-1:10,157:14,42,157:6,-1:5,157,103:2,157,-1:8,157,-1:10,157:16,43,15" +
"7:4,-1:5,157,103:2,157,-1:8,157,-1:10,157:7,44,157:13,-1:5,157,103:2,157,-1" +
":8,157,-1:10,157:8,45,157:12,-1:5,157,103:2,157,-1:8,157,-1:10,157:3,46,157" +
":17,-1:5,157,103:2,157,-1:8,157,-1:10,157:3,47,157:17,-1:5,157,103:2,157,-1" +
":8,157,-1:10,157:8,48,157:12,-1:5,157,103:2,157,-1:8,157,-1:10,157:7,105,15" +
"7:7,67,157:5,-1:5,157,103:2,157,-1:8,157,-1:10,157:2,71,157:18,-1:5,157,103" +
":2,157,-1:8,157,-1:10,157:5,160,157:3,117,157:11,-1:5,157,103:2,157,-1:8,15" +
"7,-1:10,157:16,118,157:4,-1:5,157,103:2,157,-1:8,157,-1:10,157:10,173,157:1" +
"0,-1:5,157,103:2,157,-1:8,157,-1:10,157:7,174,157:13,-1:5,157,103:2,157,-1:" +
"8,157,-1:10,157:15,119,157:5,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,73,157" +
":16,-1:5,157,103:2,157,-1:8,157,-1:10,157:15,120,157:3,121,157,-1:5,157,103" +
":2,157,-1:8,157,-1:10,157:3,162,157:17,-1:5,157,103:2,157,-1:8,157,-1:10,15" +
"7:12,122,157:8,-1:5,157,103:2,157,-1:8,157,-1:10,157:13,123,157:7,-1:5,157," +
"103:2,157,-1:8,157,-1:10,157:8,163,157:12,-1:5,157,103:2,157,-1:8,157,-1:10" +
",157:14,124,157:6,-1:5,157,103:2,157,-1:8,157,-1:10,157:18,125,157:2,-1:5,1" +
"57,103:2,157,-1:8,157,-1:10,157:5,128,157:15,-1:5,157,103:2,157,-1:8,157,-1" +
":10,157:9,130,157:11,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,75,157:15,-1:5" +
",157,103:2,157,-1:8,157,-1:10,157:2,166,157:18,-1:5,157,103:2,157,-1:8,157," +
"-1:10,157:16,165,157:4,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,77,157:15,-1" +
":5,157,103:2,157,-1:8,157,-1:10,157:6,134,157:14,-1:5,157,103:2,157,-1:8,15" +
"7,-1:10,157:6,79,157:14,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,135,157:16," +
"-1:5,157,103:2,157,-1:8,157,-1:10,157:5,81,157:15,-1:5,157,103:2,157,-1:8,1" +
"57,-1:10,157:10,136,157:10,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,83,157:1" +
"5,-1:5,157,103:2,157,-1:8,157,-1:10,157:18,85,157:2,-1:5,157,103:2,157,-1:8" +
",157,-1:10,137,157:20,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,138,157:15,-1" +
":5,157,103:2,157,-1:8,157,-1:10,157:14,139,157:6,-1:5,157,103:2,157,-1:8,15" +
"7,-1:10,157:3,140,157:17,-1:5,157,103:2,157,-1:8,157,-1:10,157:9,168,157:11" +
",-1:5,157,103:2,157,-1:8,157,-1:10,157:7,87,157:13,-1:5,157,103:2,157,-1:8," +
"157,-1:10,157:17,89,157:3,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,90,157:15" +
",-1:5,157,103:2,157,-1:8,157,-1:10,157:6,143,157:14,-1:5,157,103:2,157,-1:8" +
",157,-1:10,157:7,91,157:13,-1:5,157,103:2,157,-1:8,157,-1:10,157:15,170,157" +
":5,-1:5,157,103:2,157,-1:8,157,-1:10,157:7,144,157:13,-1:5,157,103:2,157,-1" +
":8,157,-1:10,157:2,146,157:18,-1:5,157,103:2,157,-1:8,157,-1:10,157:20,147," +
"-1:5,157,103:2,157,-1:8,157,-1:10,157:4,150,157:16,-1:5,157,103:2,157,-1:8," +
"157,-1:10,157:2,92,157:18,-1:5,157,103:2,157,-1:8,157,-1:10,157:10,93,157:1" +
"0,-1:5,157,103:2,157,-1:8,157,-1:10,157:10,152,157:10,-1:5,157,103:2,157,-1" +
":8,157,-1:10,157:5,94,157:15,-1:5,157,103:2,157,-1:8,157,-1:10,157:2,153,15" +
"7:18,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,95,157:16,-1:5,157,103:2,157,-" +
"1:8,157,-1:10,157:7,96,157:13,-1:5,157,103:2,157,-1:8,157,-1:10,157:6,154,1" +
"57:14,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,97,157:16,-1:5,157,103:2,157," +
"-1:8,157,-1:10,157:10,155,157:10,-1:5,157,103:2,157,-1:8,157,-1:10,157:7,15" +
"6,157:13,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,98,157:16,-1:5,157,103:2,1" +
"57,-1:8,157,-1:10,157:10,99,157:10,-1:5,157,103:2,157,-1:8,157,-1:10,157:10" +
",161,157:10,-1:5,157,103:2,157,-1:8,157,-1:10,157:15,127,157:5,-1:5,157,103" +
":2,157,-1:8,157,-1:10,157:3,129,157:17,-1:5,157,103:2,157,-1:8,157,-1:10,15" +
"7:5,132,157:15,-1:5,157,103:2,157,-1:8,157,-1:10,157:9,175,157:11,-1:5,157," +
"103:2,157,-1:8,157,-1:10,157:6,164,157:14,-1:5,157,103:2,157,-1:8,157,-1:10" +
",157:10,167,157:10,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,142,157:15,-1:5," +
"157,103:2,157,-1:8,157,-1:10,157:3,141,157:17,-1:5,157,103:2,157,-1:8,157,-" +
"1:10,157:6,149,157:14,-1:5,157,103:2,157,-1:8,157,-1:10,157:15,145,157:5,-1" +
":5,157,103:2,157,-1:8,157,-1:10,157:7,148,157:13,-1:5,157,103:2,157,-1:8,15" +
"7,-1:10,157:4,151,157:16,-1:5,157,103:2,157,-1:8,157,-1:10,157:17,104,157:3" +
",-1:5,157,103:2,157,-1:8,157,-1:10,157:10,126,157:10,-1:5,157,103:2,157,-1:" +
"8,157,-1:10,157:3,131,157:17,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,133,15" +
"7:15,-1:5,157,103:2,157,-1:8,157,-1:10,157:6,169,157:14,-1:5,157,103:2,157," +
"-1:8,157,-1:10,157:7,158,157:13,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,106" +
",157:16,-1:5,157,103:2,157,-1:8,157,-1:10,157:5,107,157:4,108,157:10,-1:5,1" +
"57,103:2,157,-1:8,157,-1:10,157:4,109,110,157:15,-1:5,157,103:2,157,-1:8,15" +
"7,-1:10,157:5,111,112,157:14,-1:5,157,103:2,157,-1:8,157,-1:10,157:4,113,15" +
"7:16,-1:5,157,103:2,157,-1:8,157,-1:10,157:2,114,157,115,172,157:15,-1:5,15" +
"7,103:2,157,-1:8,157,-1:10,157:15,159,157:5,-1:5,157,103:2,157,-1:8,157,-1:" +
"10,157:6,116,157:14,-1:5,157,103:2,157,-1");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(sym._SYMB_0); }
					case -3:
						break;
					case 3:
						{ return new Symbol(sym._SYMB_1); }
					case -4:
						break;
					case 4:
						{ return new Symbol(sym._SYMB_2); }
					case -5:
						break;
					case 5:
						{ return new Symbol(sym._SYMB_10); }
					case -6:
						break;
					case 6:
						{ return new Symbol(sym._SYMB_4); }
					case -7:
						break;
					case 7:
						{ return new Symbol(sym._SYMB_5); }
					case -8:
						break;
					case 8:
						{ return new Symbol(sym._SYMB_6); }
					case -9:
						break;
					case 9:
						{ return new Symbol(sym._SYMB_7); }
					case -10:
						break;
					case 10:
						{ return new Symbol(sym._SYMB_8); }
					case -11:
						break;
					case 11:
						{ return new Symbol(sym._SYMB_9); }
					case -12:
						break;
					case 12:
						{ return new Symbol(sym._SYMB_11); }
					case -13:
						break;
					case 13:
						{ return new Symbol(sym._SYMB_12); }
					case -14:
						break;
					case 14:
						{ return new Symbol(sym._SYMB_13); }
					case -15:
						break;
					case 15:
						{ return new Symbol(sym._SYMB_14); }
					case -16:
						break;
					case 16:
						{ return new Symbol(sym._SYMB_15); }
					case -17:
						break;
					case 17:
						{ return new Symbol(sym._SYMB_16); }
					case -18:
						break;
					case 18:
						{ return new Symbol(sym._SYMB_17); }
					case -19:
						break;
					case 19:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -20:
						break;
					case 20:
						{ /* ignore white space. */ }
					case -21:
						break;
					case 21:
						{ yybegin(STRING); }
					case -22:
						break;
					case 22:
						{ yybegin(CHAR); }
					case -23:
						break;
					case 23:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -24:
						break;
					case 24:
						{ yybegin(COMMENT); }
					case -25:
						break;
					case 25:
						{ return new Symbol(sym._SYMB_3); }
					case -26:
						break;
					case 26:
						{ /* BNFC single-line comment */ }
					case -27:
						break;
					case 27:
						{ return new Symbol(sym._SYMB_24); }
					case -28:
						break;
					case 28:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -29:
						break;
					case 29:
						{ return new Symbol(sym._SYMB_18); }
					case -30:
						break;
					case 30:
						{ return new Symbol(sym._SYMB_33); }
					case -31:
						break;
					case 31:
						{ return new Symbol(sym._SYMB_31); }
					case -32:
						break;
					case 32:
						{ return new Symbol(sym._SYMB_35); }
					case -33:
						break;
					case 33:
						{ return new Symbol(sym._SYMB_22); }
					case -34:
						break;
					case 34:
						{ return new Symbol(sym._SYMB_28); }
					case -35:
						break;
					case 35:
						{ return new Symbol(sym._SYMB_37); }
					case -36:
						break;
					case 36:
						{ return new Symbol(sym._SYMB_38); }
					case -37:
						break;
					case 37:
						{ return new Symbol(sym._SYMB_21); }
					case -38:
						break;
					case 38:
						{ return new Symbol(sym._SYMB_26); }
					case -39:
						break;
					case 39:
						{ return new Symbol(sym._SYMB_27); }
					case -40:
						break;
					case 40:
						{ return new Symbol(sym._SYMB_20); }
					case -41:
						break;
					case 41:
						{ return new Symbol(sym._SYMB_25); }
					case -42:
						break;
					case 42:
						{ return new Symbol(sym._SYMB_29); }
					case -43:
						break;
					case 43:
						{ return new Symbol(sym._SYMB_36); }
					case -44:
						break;
					case 44:
						{ return new Symbol(sym._SYMB_30); }
					case -45:
						break;
					case 45:
						{ return new Symbol(sym._SYMB_19); }
					case -46:
						break;
					case 46:
						{ return new Symbol(sym._SYMB_32); }
					case -47:
						break;
					case 47:
						{ return new Symbol(sym._SYMB_34); }
					case -48:
						break;
					case 48:
						{ return new Symbol(sym._SYMB_23); }
					case -49:
						break;
					case 49:
						{ }
					case -50:
						break;
					case 50:
						{ }
					case -51:
						break;
					case 51:
						{ yybegin(YYINITIAL); }
					case -52:
						break;
					case 52:
						{ yybegin(CHAREND); return new Symbol(sym._CHAR_, new Character(yytext().charAt(0))); }
					case -53:
						break;
					case 53:
						{ yybegin(CHARESC); }
					case -54:
						break;
					case 54:
						{ yybegin(CHAREND); return new Symbol(sym._CHAR_, new Character(yytext().charAt(0))); }
					case -55:
						break;
					case 55:
						{ yybegin(CHAREND); return new Symbol(sym._CHAR_, new Character('\n')); }
					case -56:
						break;
					case 56:
						{ yybegin(CHAREND); return new Symbol(sym._CHAR_, new Character('\t')); }
					case -57:
						break;
					case 57:
						{yybegin(YYINITIAL);}
					case -58:
						break;
					case 58:
						{ pstring += yytext(); }
					case -59:
						break;
					case 59:
						{ String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern()); }
					case -60:
						break;
					case 60:
						{ yybegin(ESCAPED); }
					case -61:
						break;
					case 61:
						{ pstring += yytext(); yybegin(STRING); }
					case -62:
						break;
					case 62:
						{ pstring +=  "\n"; yybegin(STRING); }
					case -63:
						break;
					case 63:
						{ pstring += "\t"; yybegin(STRING); }
					case -64:
						break;
					case 64:
						{ pstring += "\""; yybegin(STRING); }
					case -65:
						break;
					case 65:
						{ pstring += "\\"; yybegin(STRING); }
					case -66:
						break;
					case 67:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -67:
						break;
					case 68:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -68:
						break;
					case 69:
						{ }
					case -69:
						break;
					case 71:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -70:
						break;
					case 73:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -71:
						break;
					case 75:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -72:
						break;
					case 77:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -73:
						break;
					case 79:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -74:
						break;
					case 81:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -75:
						break;
					case 83:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -76:
						break;
					case 85:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -77:
						break;
					case 87:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -78:
						break;
					case 89:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -79:
						break;
					case 90:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -80:
						break;
					case 91:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -81:
						break;
					case 92:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -82:
						break;
					case 93:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -83:
						break;
					case 94:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -84:
						break;
					case 95:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -85:
						break;
					case 96:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -86:
						break;
					case 97:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -87:
						break;
					case 98:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -88:
						break;
					case 99:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -89:
						break;
					case 100:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -90:
						break;
					case 101:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -91:
						break;
					case 102:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -92:
						break;
					case 103:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -93:
						break;
					case 104:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -94:
						break;
					case 105:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -95:
						break;
					case 106:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -96:
						break;
					case 107:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -97:
						break;
					case 108:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -98:
						break;
					case 109:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -99:
						break;
					case 110:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -100:
						break;
					case 111:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -101:
						break;
					case 112:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -102:
						break;
					case 113:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -103:
						break;
					case 114:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -104:
						break;
					case 115:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -105:
						break;
					case 116:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -106:
						break;
					case 117:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -107:
						break;
					case 118:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -108:
						break;
					case 119:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -109:
						break;
					case 120:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -110:
						break;
					case 121:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -111:
						break;
					case 122:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -112:
						break;
					case 123:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -113:
						break;
					case 124:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -114:
						break;
					case 125:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -115:
						break;
					case 126:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -116:
						break;
					case 127:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -117:
						break;
					case 128:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -118:
						break;
					case 129:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -119:
						break;
					case 130:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -120:
						break;
					case 131:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -121:
						break;
					case 132:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -122:
						break;
					case 133:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -123:
						break;
					case 134:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -124:
						break;
					case 135:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -125:
						break;
					case 136:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -126:
						break;
					case 137:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -127:
						break;
					case 138:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -128:
						break;
					case 139:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -129:
						break;
					case 140:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -130:
						break;
					case 141:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -131:
						break;
					case 142:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -132:
						break;
					case 143:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -133:
						break;
					case 144:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -134:
						break;
					case 145:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -135:
						break;
					case 146:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -136:
						break;
					case 147:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -137:
						break;
					case 148:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -138:
						break;
					case 149:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -139:
						break;
					case 150:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -140:
						break;
					case 151:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -141:
						break;
					case 152:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -142:
						break;
					case 153:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -143:
						break;
					case 154:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -144:
						break;
					case 155:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -145:
						break;
					case 156:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -146:
						break;
					case 157:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -147:
						break;
					case 158:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -148:
						break;
					case 159:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -149:
						break;
					case 160:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -150:
						break;
					case 161:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -151:
						break;
					case 162:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -152:
						break;
					case 163:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -153:
						break;
					case 164:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -154:
						break;
					case 165:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -155:
						break;
					case 166:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -156:
						break;
					case 167:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -157:
						break;
					case 168:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -158:
						break;
					case 169:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -159:
						break;
					case 170:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -160:
						break;
					case 171:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -161:
						break;
					case 172:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -162:
						break;
					case 173:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -163:
						break;
					case 174:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -164:
						break;
					case 175:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -165:
						break;
					case 176:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -166:
						break;
					case 177:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -167:
						break;
					case 178:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -168:
						break;
					case 179:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -169:
						break;
					case 180:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -170:
						break;
					case 181:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -171:
						break;
					case 182:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -172:
						break;
					case 183:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -173:
						break;
					case 184:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -174:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
