// -*- Java -*- This Cup file was machine-generated by BNFC
package com.biosimilarity.lift.model.vorpal;

parser code {:
  public com.biosimilarity.lift.model.vorpal.Absyn.LGrammar pLGrammar() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.model.vorpal.Absyn.LGrammar) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.biosimilarity.lift.model.vorpal.Absyn.LGrammar LGrammar;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.LDef LDef;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListLDef ListLDef;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Grammar Grammar;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListDef ListDef;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListItem ListItem;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Def Def;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Item Item;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Cat Cat;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Label Label;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.LabelId LabelId;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ProfItem ProfItem;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.IntList IntList;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListInteger ListInteger;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListIntList ListIntList;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem ListProfItem;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Arg Arg;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListArg ListArg;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Exp Exp;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Exp Exp1;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Exp Exp2;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListExp ListExp2;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListExp ListExp;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListString ListString;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListRHS ListRHS;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.RHS RHS;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize MinimumSize;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Reg Reg2;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Reg Reg1;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Reg Reg3;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.Reg Reg;
nonterminal com.biosimilarity.lift.model.vorpal.Absyn.ListIdent ListIdent;

terminal _SYMB_0;    //   :
terminal _SYMB_1;    //   ;
terminal _SYMB_2;    //   .
terminal _SYMB_3;    //   ::=
terminal _SYMB_4;    //   [
terminal _SYMB_5;    //   ]
terminal _SYMB_6;    //   _
terminal _SYMB_7;    //   (
terminal _SYMB_8;    //   )
terminal _SYMB_9;    //   ,
terminal _SYMB_10;    //   =
terminal _SYMB_11;    //   |
terminal _SYMB_12;    //   -
terminal _SYMB_13;    //   *
terminal _SYMB_14;    //   +
terminal _SYMB_15;    //   ?
terminal _SYMB_16;    //   {
terminal _SYMB_17;    //   }
terminal _SYMB_18;    //   char
terminal _SYMB_19;    //   coercions
terminal _SYMB_20;    //   comment
terminal _SYMB_21;    //   define
terminal _SYMB_22;    //   digit
terminal _SYMB_23;    //   entrypoints
terminal _SYMB_24;    //   eps
terminal _SYMB_25;    //   internal
terminal _SYMB_26;    //   layout
terminal _SYMB_27;    //   letter
terminal _SYMB_28;    //   lower
terminal _SYMB_29;    //   nonempty
terminal _SYMB_30;    //   position
terminal _SYMB_31;    //   rules
terminal _SYMB_32;    //   separator
terminal _SYMB_33;    //   stop
terminal _SYMB_34;    //   terminator
terminal _SYMB_35;    //   token
terminal _SYMB_36;    //   toplevel
terminal _SYMB_37;    //   upper
terminal _SYMB_38;    //   views

terminal String _STRING_;
terminal Character _CHAR_;
terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with LGrammar;


LGrammar ::= ListLDef:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LGr(p_1); :} 
;
LDef ::= Def:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.DefAll(p_1); :} 
  | ListIdent:p_1 _SYMB_0 Def:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.DefSome(p_1,p_3); :}
  | _SYMB_38 ListIdent:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LDefView(p_2); :}
;
ListLDef ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListLDef(); :} 
  | LDef:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListLDef(); RESULT.addLast(p_1); :}
  | LDef:p_1 _SYMB_1 ListLDef:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Grammar ::= ListDef:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Grammar(p_1); :} 
;
ListDef ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListDef(); :} 
  | Def:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListDef(); RESULT.addLast(p_1); :}
  | Def:p_1 _SYMB_1 ListDef:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListItem ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListItem(); :} 
  | ListItem:p_1 Item:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Def ::= Label:p_1 _SYMB_2 Cat:p_3 _SYMB_3 ListItem:p_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Rule(p_1,p_3,p_5); :} 
  | _SYMB_20 _STRING_:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Comment(p_2); :}
  | _SYMB_20 _STRING_:p_2 _STRING_:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Comments(p_2,p_3); :}
  | _SYMB_25 Label:p_2 _SYMB_2 Cat:p_4 _SYMB_3 ListItem:p_6  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Internal(p_2,p_4,p_6); :}
  | _SYMB_35 _IDENT_:p_2 Reg:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Token(p_2,p_3); :}
  | _SYMB_30 _SYMB_35 _IDENT_:p_3 Reg:p_4  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.PosToken(p_3,p_4); :}
  | _SYMB_23 ListIdent:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Entryp(p_2); :}
  | _SYMB_32 MinimumSize:p_2 Cat:p_3 _STRING_:p_4  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Separator(p_2,p_3,p_4); :}
  | _SYMB_34 MinimumSize:p_2 Cat:p_3 _STRING_:p_4  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Terminator(p_2,p_3,p_4); :}
  | _SYMB_19 _IDENT_:p_2 _INTEGER_:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Coercions(p_2,p_3); :}
  | _SYMB_31 _IDENT_:p_2 _SYMB_3 ListRHS:p_4  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Rules(p_2,p_4); :}
  | _SYMB_21 _IDENT_:p_2 ListArg:p_3 _SYMB_10 Exp:p_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Function(p_2,p_3,p_5); :}
  | _SYMB_26 ListString:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Layout(p_2); :}
  | _SYMB_26 _SYMB_33 ListString:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LayoutStop(p_3); :}
  | _SYMB_26 _SYMB_36  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LayoutTop(); :}
;
Item ::= _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Terminal(p_1); :} 
  | Cat:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.NTerminal(p_1); :}
;
Cat ::= _SYMB_4 Cat:p_2 _SYMB_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListCat(p_2); :} 
  | _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.IdCat(p_1); :}
;
Label ::= LabelId:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabNoP(p_1); :} 
  | LabelId:p_1 ListProfItem:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabP(p_1,p_2); :}
  | LabelId:p_1 LabelId:p_2 ListProfItem:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabPF(p_1,p_2,p_3); :}
  | LabelId:p_1 LabelId:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabF(p_1,p_2); :}
;
LabelId ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Id(p_1); :} 
  | _SYMB_6  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Wild(); :}
  | _SYMB_4 _SYMB_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListE(); :}
  | _SYMB_7 _SYMB_0 _SYMB_8  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListCons(); :}
  | _SYMB_7 _SYMB_0 _SYMB_4 _SYMB_5 _SYMB_8  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListOne(); :}
;
ProfItem ::= _SYMB_7 _SYMB_4 ListIntList:p_3 _SYMB_5 _SYMB_9 _SYMB_4 ListInteger:p_7 _SYMB_5 _SYMB_8  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ProfIt(p_3,p_7); :} 
;
IntList ::= _SYMB_4 ListInteger:p_2 _SYMB_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Ints(p_2); :} 
;
ListInteger ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListInteger(); :} 
  | _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListInteger(); RESULT.addLast(p_1); :}
  | _INTEGER_:p_1 _SYMB_9 ListInteger:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListIntList ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListIntList(); :} 
  | IntList:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListIntList(); RESULT.addLast(p_1); :}
  | IntList:p_1 _SYMB_9 ListIntList:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListProfItem ::= ProfItem:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem(); RESULT.addLast(p_1); :} 
  | ProfItem:p_1 ListProfItem:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Arg ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Arg(p_1); :} 
;
ListArg ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListArg(); :} 
  | ListArg:p_1 Arg:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Exp ::= Exp1:p_1 _SYMB_0 Exp:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Cons(p_1,p_3); :} 
  | Exp1:p_1  {: RESULT = p_1; :}
;
Exp1 ::= _IDENT_:p_1 ListExp2:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.App(p_1,p_2); :} 
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp2 ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Var(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitInt(p_1); :}
  | _CHAR_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitChar(p_1); :}
  | _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitString(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitDouble(p_1); :}
  | _SYMB_4 ListExp:p_2 _SYMB_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.List(p_2); :}
  | _SYMB_7 Exp:p_2 _SYMB_8  {: RESULT = p_2; :}
;
ListExp2 ::= Exp2:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListExp(); RESULT.addLast(p_1); :} 
  | Exp2:p_1 ListExp2:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
ListExp ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListExp(); :} 
  | Exp:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListExp(); RESULT.addLast(p_1); :}
  | Exp:p_1 _SYMB_9 ListExp:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListString ::= _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListString(); RESULT.addLast(p_1); :} 
  | _STRING_:p_1 _SYMB_9 ListString:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListRHS ::= RHS:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListRHS(); RESULT.addLast(p_1); :} 
  | RHS:p_1 _SYMB_11 ListRHS:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
RHS ::= ListItem:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RHS(p_1); :} 
;
MinimumSize ::= _SYMB_29  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.MNonempty(); :} 
  |  /* empty */  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.MEmpty(); :}
;
Reg2 ::= Reg2:p_1 Reg3:p_2  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RSeq(p_1,p_2); :} 
  | Reg3:p_1  {: RESULT = p_1; :}
;
Reg1 ::= Reg1:p_1 _SYMB_11 Reg2:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RAlt(p_1,p_3); :} 
  | Reg2:p_1 _SYMB_12 Reg2:p_3  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RMinus(p_1,p_3); :}
  | Reg2:p_1  {: RESULT = p_1; :}
;
Reg3 ::= Reg3:p_1 _SYMB_13  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RStar(p_1); :} 
  | Reg3:p_1 _SYMB_14  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RPlus(p_1); :}
  | Reg3:p_1 _SYMB_15  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ROpt(p_1); :}
  | _SYMB_24  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.REps(); :}
  | _CHAR_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RChar(p_1); :}
  | _SYMB_4 _STRING_:p_2 _SYMB_5  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RAlts(p_2); :}
  | _SYMB_16 _STRING_:p_2 _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RSeqs(p_2); :}
  | _SYMB_22  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RDigit(); :}
  | _SYMB_27  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RLetter(); :}
  | _SYMB_37  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RUpper(); :}
  | _SYMB_28  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RLower(); :}
  | _SYMB_18  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RAny(); :}
  | _SYMB_7 Reg:p_2 _SYMB_8  {: RESULT = p_2; :}
;
Reg ::= Reg1:p_1  {: RESULT = p_1; :} 
;
ListIdent ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListIdent(); RESULT.addLast(p_1); :} 
  | _IDENT_:p_1 _SYMB_9 ListIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

