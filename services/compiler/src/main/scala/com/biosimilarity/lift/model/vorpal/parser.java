
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 11 17:04:56 PDT 2010
//----------------------------------------------------

package com.biosimilarity.lift.model.vorpal;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 11 17:04:56 PDT 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\005\000\002\003\004\000\002\004\002" +
    "\000\002\004\003\000\002\004\005\000\002\005\003\000" +
    "\002\006\002\000\002\006\003\000\002\006\005\000\002" +
    "\007\002\000\002\007\004\000\002\010\007\000\002\010" +
    "\004\000\002\010\005\000\002\010\010\000\002\010\005" +
    "\000\002\010\006\000\002\010\004\000\002\010\006\000" +
    "\002\010\006\000\002\010\005\000\002\010\006\000\002" +
    "\010\007\000\002\010\004\000\002\010\005\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\005\000\002\013\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\004\000\002\014\005\000\002\014" +
    "\007\000\002\015\013\000\002\016\005\000\002\017\002" +
    "\000\002\017\003\000\002\017\005\000\002\020\002\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\004\000\002\022\003\000\002\023\002\000\002\023" +
    "\004\000\002\024\005\000\002\024\003\000\002\025\004" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\005\000\002\027\003\000\002\027" +
    "\004\000\002\030\002\000\002\030\003\000\002\030\005" +
    "\000\002\031\003\000\002\031\005\000\002\032\003\000" +
    "\002\032\005\000\002\033\003\000\002\034\003\000\002" +
    "\034\002\000\002\035\004\000\002\035\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\003\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\005\000\002\037\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\005\000\002\040\003" +
    "\000\002\041\003\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\044\002\ufffc\010\020\012\016\013\015\027" +
    "\013\030\027\031\026\033\025\035\024\036\023\042\012" +
    "\043\010\044\007\046\005\047\004\052\032\057\006\001" +
    "\002\000\004\057\247\001\002\000\010\010\uffb4\041\240" +
    "\057\uffb4\001\002\000\020\004\uffa0\006\uffdc\010\uffdc\012" +
    "\uffdc\013\uffdc\015\035\057\uffdc\001\002\000\010\010\uffb4" +
    "\041\240\057\uffb4\001\002\000\004\057\231\001\002\000" +
    "\006\002\ufffb\005\227\001\002\000\004\047\171\001\002" +
    "\000\004\057\167\001\002\000\014\006\uffe0\010\020\012" +
    "\016\013\142\057\077\001\002\000\004\004\132\001\002" +
    "\000\014\006\uffdb\010\uffdb\012\uffdb\013\uffdb\057\uffdb\001" +
    "\002\000\004\002\000\001\002\000\004\011\131\001\002" +
    "\000\004\004\127\001\002\000\004\006\123\001\002\000" +
    "\010\045\114\050\117\053\116\001\002\000\012\010\020" +
    "\012\016\013\015\057\077\001\002\000\004\057\034\001" +
    "\002\000\004\057\042\001\002\000\004\053\040\001\002" +
    "\000\006\002\uffff\005\uffff\001\002\000\004\002\037\001" +
    "\002\000\004\057\034\001\002\000\006\002\ufffd\005\ufffd" +
    "\001\002\000\012\002\uffa0\004\uffa0\005\uffa0\015\035\001" +
    "\002\000\004\057\034\001\002\000\010\002\uff9f\004\uff9f" +
    "\005\uff9f\001\002\000\004\002\001\001\002\000\010\002" +
    "\ufff2\005\ufff2\053\041\001\002\000\006\002\ufff1\005\ufff1" +
    "\001\002\000\006\016\uffcc\057\uffcc\001\002\000\006\016" +
    "\044\057\045\001\002\000\020\010\051\013\050\053\054" +
    "\054\047\055\055\056\056\057\053\001\002\000\006\016" +
    "\uffcd\057\uffcd\001\002\000\006\016\uffcb\057\uffcb\001\002" +
    "\000\034\002\uffc4\004\uffc4\005\uffc4\010\uffc4\011\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\001\002\000\020\010\051\013\050\053\054\054" +
    "\047\055\055\056\056\057\053\001\002\000\022\010\051" +
    "\011\uffbd\013\050\053\054\054\047\055\055\056\056\057" +
    "\053\001\002\000\006\002\uffe8\005\uffe8\001\002\000\034" +
    "\002\uffc6\004\uffc6\005\uffc6\010\051\011\uffc6\013\050\014" +
    "\uffc6\015\uffc6\053\054\054\047\055\055\056\056\057\064" +
    "\001\002\000\034\002\uffc3\004\uffc3\005\uffc3\010\uffc3\011" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\001\002\000\034\002\uffc5\004\uffc5\005" +
    "\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002\000\034\002" +
    "\uffc2\004\uffc2\005\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\001" +
    "\002\000\016\002\uffc7\004\uffc7\005\uffc7\011\uffc7\014\uffc7" +
    "\015\uffc7\001\002\000\016\002\uffc9\004\061\005\uffc9\011" +
    "\uffc9\014\uffc9\015\uffc9\001\002\000\020\010\051\013\050" +
    "\053\054\054\047\055\055\056\056\057\053\001\002\000" +
    "\014\002\uffca\005\uffca\011\uffca\014\uffca\015\uffca\001\002" +
    "\000\016\002\uffc8\004\uffc8\005\uffc8\011\uffc8\014\uffc8\015" +
    "\uffc8\001\002\000\034\002\uffc6\004\uffc6\005\uffc6\010\uffc6" +
    "\011\uffc6\013\uffc6\014\uffc6\015\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\001\002\000\034\002\uffbf\004\uffbf" +
    "\005\uffbf\010\051\011\uffbf\013\050\014\uffbf\015\uffbf\053" +
    "\054\054\047\055\055\056\056\057\064\001\002\000\016" +
    "\002\uffbe\004\uffbe\005\uffbe\011\uffbe\014\uffbe\015\uffbe\001" +
    "\002\000\006\011\uffbc\015\072\001\002\000\004\011\071" +
    "\001\002\000\034\002\uffc1\004\uffc1\005\uffc1\010\uffc1\011" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\001\002\000\022\010\051\011\uffbd\013" +
    "\050\053\054\054\047\055\055\056\056\057\053\001\002" +
    "\000\004\011\uffbb\001\002\000\004\014\075\001\002\000" +
    "\034\002\uffc0\004\uffc0\005\uffc0\010\uffc0\011\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\001\002\000\006\002\uffed\005\uffed\001\002\000\014" +
    "\006\uffdc\010\uffdc\012\uffdc\013\uffdc\057\uffdc\001\002\000" +
    "\004\006\101\001\002\000\006\010\102\057\103\001\002" +
    "\000\006\010\102\057\103\001\002\000\022\002\uffe1\005" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\017\uffe1\053\uffe1\057\uffe1" +
    "\001\002\000\004\007\105\001\002\000\014\002\ufff5\005" +
    "\ufff5\010\ufff5\053\ufff5\057\ufff5\001\002\000\014\002\ufff0" +
    "\005\ufff0\010\102\053\107\057\103\001\002\000\016\002" +
    "\uffe4\005\uffe4\010\uffe4\017\uffe4\053\uffe4\057\uffe4\001\002" +
    "\000\016\002\ufff4\005\ufff4\010\ufff4\017\ufff4\053\ufff4\057" +
    "\ufff4\001\002\000\016\002\uffe3\005\uffe3\010\uffe3\017\uffe3" +
    "\053\uffe3\057\uffe3\001\002\000\004\011\113\001\002\000" +
    "\022\002\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2\017\uffe2" +
    "\053\uffe2\057\uffe2\001\002\000\004\053\116\001\002\000" +
    "\006\002\uffe7\005\uffe7\001\002\000\010\002\uffba\005\uffba" +
    "\015\120\001\002\000\006\002\uffe5\005\uffe5\001\002\000" +
    "\004\053\116\001\002\000\006\002\uffb9\005\uffb9\001\002" +
    "\000\006\002\uffe6\005\uffe6\001\002\000\006\010\102\057" +
    "\103\001\002\000\004\007\125\001\002\000\014\002\ufff5" +
    "\005\ufff5\010\ufff5\053\ufff5\057\ufff5\001\002\000\014\002" +
    "\ufff3\005\ufff3\010\102\053\107\057\103\001\002\000\040" +
    "\010\020\012\016\013\015\027\013\030\027\031\026\033" +
    "\025\035\024\036\023\042\012\043\010\044\007\046\005" +
    "\047\004\057\077\001\002\000\006\002\ufffe\005\ufffe\001" +
    "\002\000\014\006\uffda\010\uffda\012\uffda\013\uffda\057\uffda" +
    "\001\002\000\006\010\133\014\134\001\002\000\004\011" +
    "\135\001\002\000\014\006\uffd9\010\uffd9\012\uffd9\013\uffd9" +
    "\057\uffd9\001\002\000\004\014\136\001\002\000\014\006" +
    "\uffd8\010\uffd8\012\uffd8\013\uffd8\057\uffd8\001\002\000\004" +
    "\006\uffdf\001\002\000\006\006\uffdd\013\165\001\002\000" +
    "\006\006\uffcf\013\165\001\002\000\006\004\132\010\143" +
    "\001\002\000\006\010\144\011\uffd2\001\002\000\006\011" +
    "\uffd5\055\154\001\002\000\004\011\151\001\002\000\006" +
    "\011\uffd1\015\147\001\002\000\006\010\144\011\uffd2\001" +
    "\002\000\004\011\uffd0\001\002\000\004\015\152\001\002" +
    "\000\004\010\153\001\002\000\006\011\uffd5\055\154\001" +
    "\002\000\006\011\uffd4\015\160\001\002\000\004\011\156" +
    "\001\002\000\004\014\157\001\002\000\006\006\uffd7\013" +
    "\uffd7\001\002\000\006\011\uffd5\055\154\001\002\000\004" +
    "\011\uffd3\001\002\000\004\011\163\001\002\000\006\011" +
    "\uffd6\015\uffd6\001\002\000\004\006\uffce\001\002\000\004" +
    "\010\143\001\002\000\004\006\uffde\001\002\000\004\055" +
    "\170\001\002\000\006\002\uffea\005\uffea\001\002\000\004" +
    "\057\172\001\002\000\026\010\200\013\174\024\205\026" +
    "\203\032\202\034\201\037\176\040\175\051\210\054\173" +
    "\001\002\000\046\002\uffaa\005\uffaa\010\uffaa\013\uffaa\014" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\026\uffaa\032\uffaa\034\uffaa\037\uffaa\040\uffaa\051\uffaa\054" +
    "\uffaa\001\002\000\026\010\200\013\174\024\205\026\203" +
    "\032\202\034\201\037\176\040\175\051\210\054\173\001" +
    "\002\000\046\002\uffa4\005\uffa4\010\uffa4\013\uffa4\014\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\032\uffa4\034\uffa4\037\uffa4\040\uffa4\051\uffa4\054\uffa4" +
    "\001\002\000\046\002\uffa6\005\uffa6\010\uffa6\013\uffa6\014" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\026\uffa6\032\uffa6\034\uffa6\037\uffa6\040\uffa6\051\uffa6\054" +
    "\uffa6\001\002\000\006\002\uffee\005\uffee\001\002\000\004" +
    "\053\223\001\002\000\046\002\uffab\005\uffab\010\uffab\013" +
    "\uffab\014\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\026\uffab\032\uffab\034\uffab\037\uffab\040\uffab\051" +
    "\uffab\054\uffab\001\002\000\046\002\uffa7\005\uffa7\010\uffa7" +
    "\013\uffa7\014\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\026\uffa7\032\uffa7\034\uffa7\037\uffa7\040\uffa7" +
    "\051\uffa7\054\uffa7\001\002\000\046\002\uffa3\005\uffa3\010" +
    "\uffa3\013\uffa3\014\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\026\uffa3\032\uffa3\034\uffa3\037\uffa3\040" +
    "\uffa3\051\uffa3\054\uffa3\001\002\000\046\002\uffb2\005\uffb2" +
    "\010\uffb2\013\uffb2\014\uffb2\017\uffb2\020\uffb2\021\216\022" +
    "\215\023\214\024\uffb2\026\uffb2\032\uffb2\034\uffb2\037\uffb2" +
    "\040\uffb2\051\uffb2\054\uffb2\001\002\000\004\053\221\001" +
    "\002\000\040\002\uffaf\005\uffaf\010\200\013\174\014\uffaf" +
    "\017\uffaf\020\217\024\205\026\203\032\202\034\201\037" +
    "\176\040\175\051\210\054\173\001\002\000\012\002\uffa1" +
    "\005\uffa1\014\uffa1\017\211\001\002\000\046\002\uffa5\005" +
    "\uffa5\010\uffa5\013\uffa5\014\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\026\uffa5\032\uffa5\034\uffa5\037" +
    "\uffa5\040\uffa5\051\uffa5\054\uffa5\001\002\000\026\010\200" +
    "\013\174\024\205\026\203\032\202\034\201\037\176\040" +
    "\175\051\210\054\173\001\002\000\036\002\uffb1\005\uffb1" +
    "\010\200\013\174\014\uffb1\017\uffb1\024\205\026\203\032" +
    "\202\034\201\037\176\040\175\051\210\054\173\001\002" +
    "\000\046\002\uffb3\005\uffb3\010\uffb3\013\uffb3\014\uffb3\017" +
    "\uffb3\020\uffb3\021\216\022\215\023\214\024\uffb3\026\uffb3" +
    "\032\uffb3\034\uffb3\037\uffb3\040\uffb3\051\uffb3\054\uffb3\001" +
    "\002\000\046\002\uffac\005\uffac\010\uffac\013\uffac\014\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026" +
    "\uffac\032\uffac\034\uffac\037\uffac\040\uffac\051\uffac\054\uffac" +
    "\001\002\000\046\002\uffad\005\uffad\010\uffad\013\uffad\014" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\026\uffad\032\uffad\034\uffad\037\uffad\040\uffad\051\uffad\054" +
    "\uffad\001\002\000\046\002\uffae\005\uffae\010\uffae\013\uffae" +
    "\014\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\026\uffae\032\uffae\034\uffae\037\uffae\040\uffae\051\uffae" +
    "\054\uffae\001\002\000\026\010\200\013\174\024\205\026" +
    "\203\032\202\034\201\037\176\040\175\051\210\054\173" +
    "\001\002\000\036\002\uffb0\005\uffb0\010\200\013\174\014" +
    "\uffb0\017\uffb0\024\205\026\203\032\202\034\201\037\176" +
    "\040\175\051\210\054\173\001\002\000\004\025\222\001" +
    "\002\000\046\002\uffa8\005\uffa8\010\uffa8\013\uffa8\014\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026" +
    "\uffa8\032\uffa8\034\uffa8\037\uffa8\040\uffa8\051\uffa8\054\uffa8" +
    "\001\002\000\004\011\224\001\002\000\046\002\uffa9\005" +
    "\uffa9\010\uffa9\013\uffa9\014\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\026\uffa9\032\uffa9\034\uffa9\037" +
    "\uffa9\040\uffa9\051\uffa9\054\uffa9\001\002\000\004\014\226" +
    "\001\002\000\046\002\uffa2\005\uffa2\010\uffa2\013\uffa2\014" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\026\uffa2\032\uffa2\034\uffa2\037\uffa2\040\uffa2\051\uffa2\054" +
    "\uffa2\001\002\000\044\002\ufffc\010\020\012\016\013\015" +
    "\027\013\030\027\031\026\033\025\035\024\036\023\042" +
    "\012\043\010\044\007\046\005\047\004\052\032\057\006" +
    "\001\002\000\004\002\ufffa\001\002\000\004\007\232\001" +
    "\002\000\016\002\ufff5\005\ufff5\010\ufff5\017\ufff5\053\ufff5" +
    "\057\ufff5\001\002\000\016\002\uffb6\005\uffb6\010\102\017" +
    "\uffb6\053\107\057\103\001\002\000\010\002\uffb8\005\uffb8" +
    "\017\236\001\002\000\006\002\uffe9\005\uffe9\001\002\000" +
    "\016\002\ufff5\005\ufff5\010\ufff5\017\ufff5\053\ufff5\057\ufff5" +
    "\001\002\000\006\002\uffb7\005\uffb7\001\002\000\006\010" +
    "\uffb5\057\uffb5\001\002\000\006\010\102\057\103\001\002" +
    "\000\004\053\243\001\002\000\006\002\uffec\005\uffec\001" +
    "\002\000\006\010\102\057\103\001\002\000\004\053\246" +
    "\001\002\000\006\002\uffeb\005\uffeb\001\002\000\026\010" +
    "\200\013\174\024\205\026\203\032\202\034\201\037\176" +
    "\040\175\051\210\054\173\001\002\000\006\002\uffef\005" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\020\002\030\003\010\004\016\010\027\013" +
    "\021\014\013\041\020\001\001\000\002\001\001\000\004" +
    "\034\243\001\001\000\002\001\001\000\004\034\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\137\015\140\021\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\114\001\001\000\006\013\077\014\013\001\001" +
    "\000\004\041\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\042\001\001\000" +
    "\004\022\045\001\001\000\010\024\051\025\057\026\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\073\025\057\026\056\001\001\000\012" +
    "\024\066\025\057\026\056\030\067\001\001\000\002\001" +
    "\001\000\006\026\064\027\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\061\025\057\026\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\064\027\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\066\025\057\026\056\030\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\103\001\001" +
    "\000\004\012\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\105\001\001\000\006\011\107\012\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\123\001\001\000\002\001\001\000" +
    "\004\007\125\001\001\000\006\011\107\012\110\001\001" +
    "\000\010\010\127\013\021\014\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\140\021\165\001\001\000\006" +
    "\015\140\021\163\001\001\000\002\001\001\000\006\016" +
    "\145\020\144\001\001\000\004\017\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\145\020\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\035\205\036\206\037\203\040\176\001\001\000\002" +
    "\001\001\000\012\035\205\036\206\037\203\040\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\211\037\203\001\001\000\004\037\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\217\037\203\001\001\000\004" +
    "\037\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\010\004\227\010\027\013\021\014" +
    "\013\041\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\232\032\234\033\233\001\001\000\006\011" +
    "\107\012\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\232\032\236\033\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\035\205\036\206" +
    "\037\203\040\247\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.model.vorpal.Absyn.LGrammar pLGrammar() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.model.vorpal.Absyn.LGrammar) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ListIdent ::= _IDENT_ _SYMB_9 ListIdent 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListIdent p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ListIdent ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Reg ::= Reg1 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Reg3 ::= _SYMB_7 Reg _SYMB_8 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Reg3 ::= _SYMB_18 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RAny(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Reg3 ::= _SYMB_28 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RLower(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Reg3 ::= _SYMB_37 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RUpper(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Reg3 ::= _SYMB_27 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RLetter(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Reg3 ::= _SYMB_22 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RDigit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Reg3 ::= _SYMB_16 _STRING_ _SYMB_17 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RSeqs(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Reg3 ::= _SYMB_4 _STRING_ _SYMB_5 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RAlts(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Reg3 ::= _CHAR_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Reg3 ::= _SYMB_24 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.REps(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Reg3 ::= Reg3 _SYMB_15 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ROpt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Reg3 ::= Reg3 _SYMB_14 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RPlus(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Reg3 ::= Reg3 _SYMB_13 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RStar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Reg1 ::= Reg2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Reg1 ::= Reg2 _SYMB_12 Reg2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RMinus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Reg1 ::= Reg1 _SYMB_11 Reg2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RAlt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Reg2 ::= Reg3 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg2",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Reg2 ::= Reg2 Reg3 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Reg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RSeq(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg2",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MinimumSize ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.MEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MinimumSize",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MinimumSize ::= _SYMB_29 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.MNonempty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MinimumSize",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RHS ::= ListItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.RHS RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListItem p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.RHS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RHS",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListRHS ::= RHS _SYMB_11 ListRHS 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListRHS RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.RHS p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.RHS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListRHS p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListRHS)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRHS",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListRHS ::= RHS 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListRHS RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.RHS p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.RHS)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListRHS(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRHS",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListString ::= _STRING_ _SYMB_9 ListString 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListString RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListString p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListString",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListString ::= _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListString RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListString(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListString",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListExp ::= Exp _SYMB_9 ListExp 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListExp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListExp p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListExp ::= Exp 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListExp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListExp ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListExp RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListExp2 ::= Exp2 ListExp2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListExp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListExp p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListExp2 ::= Exp2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListExp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= _SYMB_7 Exp _SYMB_8 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp2 ::= _SYMB_4 ListExp _SYMB_5 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListExp p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.List(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp2 ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp2 ::= _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp2 ::= _CHAR_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp2 ::= _INTEGER_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LitInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp2 ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp1 ::= Exp2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp1 ::= _IDENT_ ListExp2 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListExp p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.App(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp ::= Exp1 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp ::= Exp1 _SYMB_0 Exp 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Exp RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Cons(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListArg ::= ListArg Arg 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListArg RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListArg p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Arg p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListArg ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListArg RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arg ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Arg RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Arg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListProfItem ::= ProfItem ListProfItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ProfItem p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ProfItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProfItem",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListProfItem ::= ProfItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ProfItem p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ProfItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProfItem",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListIntList ::= IntList _SYMB_9 ListIntList 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListIntList RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.IntList p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.IntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListIntList p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListIntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIntList",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListIntList ::= IntList 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListIntList RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.IntList p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.IntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListIntList(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIntList",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListIntList ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListIntList RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListIntList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIntList",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListInteger ::= _INTEGER_ _SYMB_9 ListInteger 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListInteger RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListInteger p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListInteger",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListInteger ::= _INTEGER_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListInteger RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListInteger(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListInteger",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListInteger ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListInteger RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListInteger(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListInteger",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IntList ::= _SYMB_4 ListInteger _SYMB_5 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.IntList RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListInteger p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListInteger)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Ints(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntList",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ProfItem ::= _SYMB_7 _SYMB_4 ListIntList _SYMB_5 _SYMB_9 _SYMB_4 ListInteger _SYMB_5 _SYMB_8 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ProfItem RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListIntList p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListIntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListInteger p_7 = (com.biosimilarity.lift.model.vorpal.Absyn.ListInteger)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ProfIt(p_3,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProfItem",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LabelId ::= _SYMB_7 _SYMB_0 _SYMB_4 _SYMB_5 _SYMB_8 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LabelId RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListOne(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LabelId",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LabelId ::= _SYMB_7 _SYMB_0 _SYMB_8 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LabelId RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListCons(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LabelId",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LabelId ::= _SYMB_4 _SYMB_5 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LabelId RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LabelId",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LabelId ::= _SYMB_6 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LabelId RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Wild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LabelId",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LabelId ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LabelId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LabelId",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Label ::= LabelId LabelId 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Label RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LabelId p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.LabelId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.LabelId p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.LabelId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabF(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Label",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Label ::= LabelId LabelId ListProfItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Label RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LabelId p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.LabelId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.LabelId p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.LabelId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabPF(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Label",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Label ::= LabelId ListProfItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Label RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LabelId p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.LabelId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListProfItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabP(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Label",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Label ::= LabelId 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Label RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LabelId p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.LabelId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LabNoP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Label",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Cat ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Cat RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.IdCat(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cat",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Cat ::= _SYMB_4 Cat _SYMB_5 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Cat RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Cat p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Cat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListCat(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cat",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Item ::= Cat 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Item RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Cat p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Cat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.NTerminal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Item ::= _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Terminal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Def ::= _SYMB_26 _SYMB_36 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LayoutTop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Def ::= _SYMB_26 _SYMB_33 ListString 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListString p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LayoutStop(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Def ::= _SYMB_26 ListString 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListString p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Layout(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Def ::= _SYMB_21 _IDENT_ ListArg _SYMB_10 Exp 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListArg p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Exp p_5 = (com.biosimilarity.lift.model.vorpal.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Function(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Def ::= _SYMB_31 _IDENT_ _SYMB_3 ListRHS 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListRHS p_4 = (com.biosimilarity.lift.model.vorpal.Absyn.ListRHS)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Rules(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Def ::= _SYMB_19 _IDENT_ _INTEGER_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Coercions(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Def ::= _SYMB_34 MinimumSize Cat _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Cat p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Cat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Terminator(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Def ::= _SYMB_32 MinimumSize Cat _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.MinimumSize)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Cat p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Cat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Separator(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Def ::= _SYMB_23 ListIdent 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListIdent p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Entryp(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Def ::= _SYMB_30 _SYMB_35 _IDENT_ Reg 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_4 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.PosToken(p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Def ::= _SYMB_35 _IDENT_ Reg 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Reg p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Token(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Def ::= _SYMB_25 Label _SYMB_2 Cat _SYMB_3 ListItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Label p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Cat p_4 = (com.biosimilarity.lift.model.vorpal.Absyn.Cat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListItem p_6 = (com.biosimilarity.lift.model.vorpal.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Internal(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Def ::= _SYMB_20 _STRING_ _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Comments(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Def ::= _SYMB_20 _STRING_ 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Comment(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Def ::= Label _SYMB_2 Cat _SYMB_3 ListItem 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Def RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Label p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Cat p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Cat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListItem p_5 = (com.biosimilarity.lift.model.vorpal.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Rule(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListItem ::= ListItem Item 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListItem RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListItem p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Item p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListItem ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListItem RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListItem(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListDef ::= Def _SYMB_1 ListDef 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Def p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListDef p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListDef ::= Def 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Def p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListDef(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListDef ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListDef RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Grammar ::= ListDef 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.Grammar RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListDef p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.Grammar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Grammar",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListLDef ::= LDef _SYMB_1 ListLDef 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListLDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LDef p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.LDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.ListLDef p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.ListLDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListLDef ::= LDef 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListLDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LDef p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.LDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListLDef(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListLDef ::= 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.ListLDef RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.ListLDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDef ::= _SYMB_38 ListIdent 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListIdent p_2 = (com.biosimilarity.lift.model.vorpal.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LDefView(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDef ::= ListIdent _SYMB_0 Def 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListIdent p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.vorpal.Absyn.Def p_3 = (com.biosimilarity.lift.model.vorpal.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.DefSome(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LDef ::= Def 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LDef RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.Def p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.DefAll(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LGrammar ::= ListLDef 
            {
              com.biosimilarity.lift.model.vorpal.Absyn.LGrammar RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.ListLDef p_1 = (com.biosimilarity.lift.model.vorpal.Absyn.ListLDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.vorpal.Absyn.LGr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LGrammar",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LGrammar EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.model.vorpal.Absyn.LGrammar start_val = (com.biosimilarity.lift.model.vorpal.Absyn.LGrammar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

