module XMLBNF where

-- pretty-printer generated by the BNF converter

import AbsBNF
import Char

-- the top-level printing method
printXML :: XPrint a => a -> String
printXML = render . prt 0

render = unlines

-- the printer class does the job
class XPrint a where
  prt :: Int -> a -> [String]
  prtList :: Int -> [a] -> [String]
  prtList i = concat . map (prt i)

instance XPrint a => XPrint [a] where
  prt = prtList

tag t = "<" ++ t ++ ">"
etag t = "<" ++ t ++ "/>"
elemTok i t x = [replicate (i+i) ' ' ++ tag (t ++ " value = " ++ show x ++ " /")]
elemTokS i t x = elemTok i t (show x)
elemFun i t x = [replicate (i+i) ' ' ++ tag t ++ " " ++ etag x]
endtag f c = tag ("/" ++ c)


instance XPrint Integer where
  prt i x = elemTokS i "Integer" x

instance XPrint Double where
  prt i x = elemTokS i "Double" x

instance XPrint Char where
  prt i x = elemTokS i "Char" x

  prtList i xs = elemTok i "String" xs
instance XPrint Ident where
  prt i (Ident x) = elemTok i "Ident" x


instance XPrint LGrammar where
  prt i e = case e of
   LGr ldefs -> concat $  elemFun i "LGrammar" "LGr" : prt (i+1) ldefs : [[replicate (i+i) ' ' ++ endtag "LGr" "LGrammar"]]


instance XPrint LDef where
  prt i e = case e of
   DefAll def -> concat $  elemFun i "LDef" "DefAll" : prt (i+1) def : [[replicate (i+i) ' ' ++ endtag "DefAll" "LDef"]]
   DefSome ids def -> concat $  elemFun i "LDef" "DefSome" : prt (i+1) ids : prt (i+1) def : [[replicate (i+i) ' ' ++ endtag "DefSome" "LDef"]]
   LDefView ids -> concat $  elemFun i "LDef" "LDefView" : prt (i+1) ids : [[replicate (i+i) ' ' ++ endtag "LDefView" "LDef"]]


instance XPrint Grammar where
  prt i e = case e of
   Grammar defs -> concat $  elemFun i "Grammar" "Grammar" : prt (i+1) defs : [[replicate (i+i) ' ' ++ endtag "Grammar" "Grammar"]]


instance XPrint Def where
  prt i e = case e of
   Rule label cat items -> concat $  elemFun i "Def" "Rule" : prt (i+1) label : prt (i+1) cat : prt (i+1) items : [[replicate (i+i) ' ' ++ endtag "Rule" "Def"]]
   Comment str -> concat $  elemFun i "Def" "Comment" : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "Comment" "Def"]]
   Comments str0 str -> concat $  elemFun i "Def" "Comments" : prt (i+1) str0 : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "Comments" "Def"]]
   Internal label cat items -> concat $  elemFun i "Def" "Internal" : prt (i+1) label : prt (i+1) cat : prt (i+1) items : [[replicate (i+i) ' ' ++ endtag "Internal" "Def"]]
   Token id reg -> concat $  elemFun i "Def" "Token" : prt (i+1) id : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "Token" "Def"]]
   PosToken id reg -> concat $  elemFun i "Def" "PosToken" : prt (i+1) id : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "PosToken" "Def"]]
   Entryp ids -> concat $  elemFun i "Def" "Entryp" : prt (i+1) ids : [[replicate (i+i) ' ' ++ endtag "Entryp" "Def"]]
   Separator minimumsize cat str -> concat $  elemFun i "Def" "Separator" : prt (i+1) minimumsize : prt (i+1) cat : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "Separator" "Def"]]
   Terminator minimumsize cat str -> concat $  elemFun i "Def" "Terminator" : prt (i+1) minimumsize : prt (i+1) cat : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "Terminator" "Def"]]
   Coercions id n -> concat $  elemFun i "Def" "Coercions" : prt (i+1) id : prt (i+1) n : [[replicate (i+i) ' ' ++ endtag "Coercions" "Def"]]
   Rules id rhss -> concat $  elemFun i "Def" "Rules" : prt (i+1) id : prt (i+1) rhss : [[replicate (i+i) ' ' ++ endtag "Rules" "Def"]]
   Function id args exp -> concat $  elemFun i "Def" "Function" : prt (i+1) id : prt (i+1) args : prt (i+1) exp : [[replicate (i+i) ' ' ++ endtag "Function" "Def"]]
   Layout strs -> concat $  elemFun i "Def" "Layout" : prt (i+1) strs : [[replicate (i+i) ' ' ++ endtag "Layout" "Def"]]
   LayoutStop strs -> concat $  elemFun i "Def" "LayoutStop" : prt (i+1) strs : [[replicate (i+i) ' ' ++ endtag "LayoutStop" "Def"]]
   LayoutTop  -> concat $  elemFun i "Def" "LayoutTop"  : [[replicate (i+i) ' ' ++ endtag "LayoutTop" "Def"]]


instance XPrint Item where
  prt i e = case e of
   Terminal str -> concat $  elemFun i "Item" "Terminal" : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "Terminal" "Item"]]
   NTerminal cat -> concat $  elemFun i "Item" "NTerminal" : prt (i+1) cat : [[replicate (i+i) ' ' ++ endtag "NTerminal" "Item"]]


instance XPrint Cat where
  prt i e = case e of
   ListCat cat -> concat $  elemFun i "Cat" "ListCat" : prt (i+1) cat : [[replicate (i+i) ' ' ++ endtag "ListCat" "Cat"]]
   IdCat id -> concat $  elemFun i "Cat" "IdCat" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "IdCat" "Cat"]]


instance XPrint Label where
  prt i e = case e of
   LabNoP labelid -> concat $  elemFun i "Label" "LabNoP" : prt (i+1) labelid : [[replicate (i+i) ' ' ++ endtag "LabNoP" "Label"]]
   LabP labelid profitems -> concat $  elemFun i "Label" "LabP" : prt (i+1) labelid : prt (i+1) profitems : [[replicate (i+i) ' ' ++ endtag "LabP" "Label"]]
   LabPF labelid0 labelid profitems -> concat $  elemFun i "Label" "LabPF" : prt (i+1) labelid0 : prt (i+1) labelid : prt (i+1) profitems : [[replicate (i+i) ' ' ++ endtag "LabPF" "Label"]]
   LabF labelid0 labelid -> concat $  elemFun i "Label" "LabF" : prt (i+1) labelid0 : prt (i+1) labelid : [[replicate (i+i) ' ' ++ endtag "LabF" "Label"]]


instance XPrint LabelId where
  prt i e = case e of
   Id id -> concat $  elemFun i "LabelId" "Id" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "Id" "LabelId"]]
   Wild  -> concat $  elemFun i "LabelId" "Wild"  : [[replicate (i+i) ' ' ++ endtag "Wild" "LabelId"]]
   ListE  -> concat $  elemFun i "LabelId" "ListE"  : [[replicate (i+i) ' ' ++ endtag "ListE" "LabelId"]]
   ListCons  -> concat $  elemFun i "LabelId" "ListCons"  : [[replicate (i+i) ' ' ++ endtag "ListCons" "LabelId"]]
   ListOne  -> concat $  elemFun i "LabelId" "ListOne"  : [[replicate (i+i) ' ' ++ endtag "ListOne" "LabelId"]]


instance XPrint ProfItem where
  prt i e = case e of
   ProfIt intlists ns -> concat $  elemFun i "ProfItem" "ProfIt" : prt (i+1) intlists : prt (i+1) ns : [[replicate (i+i) ' ' ++ endtag "ProfIt" "ProfItem"]]


instance XPrint IntList where
  prt i e = case e of
   Ints ns -> concat $  elemFun i "IntList" "Ints" : prt (i+1) ns : [[replicate (i+i) ' ' ++ endtag "Ints" "IntList"]]


instance XPrint Arg where
  prt i e = case e of
   Arg id -> concat $  elemFun i "Arg" "Arg" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "Arg" "Arg"]]


instance XPrint Exp where
  prt i e = case e of
   Cons exp0 exp -> concat $  elemFun i "Exp" "Cons" : prt (i+1) exp0 : prt (i+1) exp : [[replicate (i+i) ' ' ++ endtag "Cons" "Exp"]]
   App id exps -> concat $  elemFun i "Exp" "App" : prt (i+1) id : prt (i+1) exps : [[replicate (i+i) ' ' ++ endtag "App" "Exp"]]
   Var id -> concat $  elemFun i "Exp" "Var" : prt (i+1) id : [[replicate (i+i) ' ' ++ endtag "Var" "Exp"]]
   LitInt n -> concat $  elemFun i "Exp" "LitInt" : prt (i+1) n : [[replicate (i+i) ' ' ++ endtag "LitInt" "Exp"]]
   LitChar c -> concat $  elemFun i "Exp" "LitChar" : prt (i+1) c : [[replicate (i+i) ' ' ++ endtag "LitChar" "Exp"]]
   LitString str -> concat $  elemFun i "Exp" "LitString" : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "LitString" "Exp"]]
   LitDouble d -> concat $  elemFun i "Exp" "LitDouble" : prt (i+1) d : [[replicate (i+i) ' ' ++ endtag "LitDouble" "Exp"]]
   List exps -> concat $  elemFun i "Exp" "List" : prt (i+1) exps : [[replicate (i+i) ' ' ++ endtag "List" "Exp"]]


instance XPrint RHS where
  prt i e = case e of
   RHS items -> concat $  elemFun i "RHS" "RHS" : prt (i+1) items : [[replicate (i+i) ' ' ++ endtag "RHS" "RHS"]]


instance XPrint MinimumSize where
  prt i e = case e of
   MNonempty  -> concat $  elemFun i "MinimumSize" "MNonempty"  : [[replicate (i+i) ' ' ++ endtag "MNonempty" "MinimumSize"]]
   MEmpty  -> concat $  elemFun i "MinimumSize" "MEmpty"  : [[replicate (i+i) ' ' ++ endtag "MEmpty" "MinimumSize"]]


instance XPrint Reg where
  prt i e = case e of
   RSeq reg0 reg -> concat $  elemFun i "Reg" "RSeq" : prt (i+1) reg0 : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "RSeq" "Reg"]]
   RAlt reg0 reg -> concat $  elemFun i "Reg" "RAlt" : prt (i+1) reg0 : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "RAlt" "Reg"]]
   RMinus reg0 reg -> concat $  elemFun i "Reg" "RMinus" : prt (i+1) reg0 : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "RMinus" "Reg"]]
   RStar reg -> concat $  elemFun i "Reg" "RStar" : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "RStar" "Reg"]]
   RPlus reg -> concat $  elemFun i "Reg" "RPlus" : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "RPlus" "Reg"]]
   ROpt reg -> concat $  elemFun i "Reg" "ROpt" : prt (i+1) reg : [[replicate (i+i) ' ' ++ endtag "ROpt" "Reg"]]
   REps  -> concat $  elemFun i "Reg" "REps"  : [[replicate (i+i) ' ' ++ endtag "REps" "Reg"]]
   RChar c -> concat $  elemFun i "Reg" "RChar" : prt (i+1) c : [[replicate (i+i) ' ' ++ endtag "RChar" "Reg"]]
   RAlts str -> concat $  elemFun i "Reg" "RAlts" : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "RAlts" "Reg"]]
   RSeqs str -> concat $  elemFun i "Reg" "RSeqs" : prt (i+1) str : [[replicate (i+i) ' ' ++ endtag "RSeqs" "Reg"]]
   RDigit  -> concat $  elemFun i "Reg" "RDigit"  : [[replicate (i+i) ' ' ++ endtag "RDigit" "Reg"]]
   RLetter  -> concat $  elemFun i "Reg" "RLetter"  : [[replicate (i+i) ' ' ++ endtag "RLetter" "Reg"]]
   RUpper  -> concat $  elemFun i "Reg" "RUpper"  : [[replicate (i+i) ' ' ++ endtag "RUpper" "Reg"]]
   RLower  -> concat $  elemFun i "Reg" "RLower"  : [[replicate (i+i) ' ' ++ endtag "RLower" "Reg"]]
   RAny  -> concat $  elemFun i "Reg" "RAny"  : [[replicate (i+i) ' ' ++ endtag "RAny" "Reg"]]



